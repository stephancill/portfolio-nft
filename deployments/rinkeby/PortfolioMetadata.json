{
  "address": "0x2A7dFa22439028E89e5c7F35C3328B603019e605",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_portfolioTrackerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "diameter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rotate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "generateCircle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "startColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "endColor",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "generateGradient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "width",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rotate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "generateSquare",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPortfolioData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "otherValue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AddressBalanceValue[4]",
              "name": "topTokens",
              "type": "tuple[4]"
            }
          ],
          "internalType": "struct PortfolioData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "g",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "hexColorString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "randomUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "g",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "a",
          "type": "string"
        }
      ],
      "name": "rgbaColorString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x111e890c627aa1ea25e16f5e65cb7ae572ba8e11f51e0fa105e39a21cf62e8eb",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0x2A7dFa22439028E89e5c7F35C3328B603019e605",
    "transactionIndex": 18,
    "gasUsed": "4178955",
    "logsBloom": "0x
    "blockHash": "0x2ce4140313c58ccc3564fca6c24ce3a5c8b8ed66bdcb8fd1bc8885d6292a0617",
    "transactionHash": "0x111e890c627aa1ea25e16f5e65cb7ae572ba8e11f51e0fa105e39a21cf62e8eb",
    "logs": [],
    "blockNumber": 9903227,
    "cumulativeGasUsed": "15447466",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x16504a23292496E994bA0bA0968F78b5728adE36"
  ],
  "numDeployments": 2,
  "solcInputHash": "760ea7a316093945492fb6a5aa575bf1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_portfolioTrackerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"diameter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rotate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateCircle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"startColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endColor\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateGradient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rotate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateSquare\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPortfolioData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AddressBalanceValue[4]\",\"name\":\"topTokens\",\"type\":\"tuple[4]\"}],\"internalType\":\"struct PortfolioData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"g\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"hexColorString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"randomUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"g\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"}],\"name\":\"rgbaColorString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PortfolioMetadata.sol\":\"PortfolioMetadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/PortfolioMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\nimport \\\"./libraries/Base64.sol\\\";\\nimport \\\"./libraries/OStrings.sol\\\";\\nimport \\\"./libraries/CustomSort.sol\\\";\\n\\nimport \\\"./interfaces/IPortfolioNFT.sol\\\";\\nimport \\\"./interfaces/IPriceFetcher.sol\\\";\\n\\nimport \\\"./structs/PortfolioData.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IPortfolioMetadata {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\ncontract PortfolioMetadata is IPortfolioMetadata {\\n    uint256 constant DECIMALS = 3;\\n    uint256 constant WIDTH = 300;\\n\\n    address portfolioTrackerAddress;\\n    IPortfolioNFT portfolioTracker;\\n\\n    constructor(address _portfolioTrackerAddress) {\\n        portfolioTrackerAddress = _portfolioTrackerAddress;\\n        portfolioTracker = IPortfolioNFT(portfolioTrackerAddress);\\n    }\\n\\n    function getPortfolioData(uint256 tokenId) public view returns (PortfolioData memory) {\\n        address[] memory tokenAddresses = portfolioTracker.getTokenAddresses(tokenId);\\n        \\n        AddressBalanceValue[] memory valueByAddress = new AddressBalanceValue[](tokenAddresses.length);\\n        PortfolioData memory portfolioData;\\n\\n        portfolioData.tokenId = tokenId;\\n        \\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            address _tokenAddress = tokenAddresses[i];\\n            address[] memory _tokenPricePath = portfolioTracker.getPricePath(tokenId, _tokenAddress);\\n            if (_tokenAddress == address(0)) {\\n                continue;\\n            } \\n            \\n            IERC20Metadata tokenContract = IERC20Metadata(_tokenAddress);\\n\\n            (uint256 price, uint256 priceDecimals) = portfolioTracker.priceFetcher().quote(_tokenPricePath);\\n            uint256 balance = tokenContract.balanceOf(portfolioTracker.ownerOf(tokenId));\\n            if (_tokenAddress == portfolioTracker.WETHAddress()) { \\n                balance += portfolioTracker.ownerOf(tokenId).balance;\\n            }\\n            uint256 value = price * balance / (10 ** (DECIMALS+priceDecimals));\\n            value /= (10 ** (tokenContract.decimals()-DECIMALS));\\n            balance /= (10 ** (tokenContract.decimals()-DECIMALS));\\n\\n            valueByAddress[i] = AddressBalanceValue(_tokenAddress, balance, value);\\n\\n            portfolioData.totalValue += value;\\n        }\\n\\n        CustomSort.sortByValue(valueByAddress, 0, int(valueByAddress.length - 1));\\n\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            uint256 value = valueByAddress[i].value;\\n            if (i > 3) {\\n                portfolioData.otherValue += value;\\n                continue;\\n            } \\n\\n            portfolioData.topTokens[i] = valueByAddress[i];\\n        }\\n\\n        return portfolioData;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public override view returns (string memory) {\\n        uint256 entropyOffset = 0;\\n        \\n        string memory output = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" width=\\\"300\\\" height=\\\"300\\\" viewBox=\\\"0 0 300 300\\\">';\\n        \\n        string[4] memory colors;\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            colors[i] = rgbaColorString(\\n                randomUint(tokenId, entropyOffset++), \\n                randomUint(tokenId, entropyOffset++), \\n                randomUint(tokenId, entropyOffset++),\\n                i%2 == 0 ? \\\"0.4\\\" : \\\"0.1\\\"\\n            );\\n        }\\n\\n        output = string(abi.encodePacked(\\n            output, '<defs>', \\n            generateGradient(colors[0], colors[1], 0), \\n            generateGradient(colors[2], colors[3], 1),\\n            '<style>.base { font: bold 30px sans-serif; fill: white}.item { font: normal 24px sans-serif; fill: white}.sub { font: normal 14px sans-serif; fill: white}</style></defs>',\\n            '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#272727\\\"/>'\\n        ));\\n        \\n        PortfolioData memory portfolioData = getPortfolioData(tokenId);\\n\\n        uint256 width1 = 80 + ((WIDTH - 80) * ((randomUint(tokenId, entropyOffset++) * 1000 / uint256(255) / 100))) / 10; // Range 80-300\\n        uint256 width2 = 80 + ((WIDTH - 80) * ((randomUint(tokenId, entropyOffset++) * 1000 / uint256(255) / 100))) / 10; // Range 80-300\\n\\n        if (width2 > width1) {\\n            uint256 tmp = width1;\\n            width1 = width2;\\n            width2 = tmp;\\n        }\\n\\n        uint256 rotation1 = (45 * (randomUint(tokenId, entropyOffset++) % 8));\\n        uint256 rotation2 = (45 * (randomUint(tokenId, entropyOffset++) % 8));\\n\\n        string memory shapeBack = randomUint(tokenId, entropyOffset++) % 2 == 0 ? generateCircle(width1, rotation1, 0) : generateSquare(width1, rotation1, 0);\\n        string memory shapeFront = randomUint(tokenId, entropyOffset++) % 2 == 0 ? generateCircle(width2, rotation2, 1) : generateSquare(width2, rotation2, 1);\\n\\n        output = string(abi.encodePacked(output, shapeBack, shapeFront));\\n\\n        output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"30\\\" class=\\\"sub\\\">Wallet #', OStrings.toString(tokenId), '</text>'));\\n\\n        for (uint256 i = 0; i < portfolioData.topTokens.length; i++) {\\n            \\n            address tokenAddress = portfolioData.topTokens[i].addr;\\n            uint256 value = portfolioData.topTokens[i].value;\\n            uint256 balance = portfolioData.topTokens[i].balance;\\n\\n            if (tokenAddress == address(0)) {\\n                continue;\\n            }\\n\\n            IERC20Metadata tokenContract = IERC20Metadata(tokenAddress);\\n\\n            string memory symbol = tokenAddress != portfolioTracker.WETHAddress() ? tokenContract.symbol() : portfolioTracker.WETHSymbol();\\n\\n            output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"', OStrings.toString(100+45*i), '\\\" class=\\\"item\\\">', symbol, '</text>'));\\n            output = string(abi.encodePacked(output, '<text x=\\\"150\\\" y=\\\"', OStrings.toString(100+45*i), '\\\" class=\\\"item\\\">$', OStrings.toStringCommaFormatWithDecimals(value, 999), '</text>'));\\n            output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"', OStrings.toString(100+14+45*i), '\\\" class=\\\"base sub\\\">', OStrings.toStringCommaFormatWithDecimals(balance, DECIMALS), '</text>'));\\n        }\\n\\n        // Other value\\n        output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"280\\\" class=\\\"item\\\">Other</text>'));\\n        output = string(abi.encodePacked(output, '<text x=\\\"150\\\" y=\\\"280\\\" class=\\\"item\\\">$', OStrings.toStringCommaFormatWithDecimals(portfolioData.otherValue, 999), '</text>'));\\n        \\n        // Total value\\n        output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"58\\\" class=\\\"base\\\">$', OStrings.toStringCommaFormatWithDecimals(portfolioData.totalValue, 999), '</text>'));\\n\\n        output = string(abi.encodePacked(output, '</svg>'));\\n        \\n        // JSON\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Balance Watcher #', OStrings.toString(tokenId), '\\\", \\\"description\\\": \\\"This NFT displays its owners balances of tracked tokens.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n\\n    function randomUint(uint256 seed, uint256 offset) public view returns (uint256) {\\n        require(offset < 32, \\\"Offset out of bounds\\\");\\n        bytes32 entropy = keccak256(abi.encodePacked(portfolioTrackerAddress, seed));\\n        bytes32 mask = bytes32(0xff << (offset * 8));\\n        return uint256((entropy & mask) >> (offset * 8));\\n    }\\n\\n    function generateCircle(uint256 diameter, uint256 rotate, uint256 index) public pure returns (string memory) {\\n        string memory center = OStrings.toString(WIDTH/2);\\n        return string(abi.encodePacked(\\n            '<circle fill=\\\"url(#paint', OStrings.toString(index), ')\\\" transform=\\\"rotate(', \\n            OStrings.toString(rotate), '', center, ' ', center, ')\\\" cx=\\\"', center, '\\\" cy=\\\"', center, '\\\" r=\\\"', \\n            OStrings.toString(diameter/2), '\\\" />'));\\n    }\\n\\n    function generateSquare(uint256 width, uint256 rotate, uint256 index) public pure returns (string memory) {\\n        string memory origin = OStrings.toString((WIDTH-width)/2);\\n        string memory center = OStrings.toString(WIDTH/2);\\n        return string(abi.encodePacked(\\n            '<rect fill=\\\"url(#paint', OStrings.toString(index), ')\\\" x=\\\"', origin, '\\\" y=\\\"', origin, '\\\"', \\n            ' width=\\\"', OStrings.toString(width), '\\\" height=\\\"', OStrings.toString(width), '\\\" transform=\\\"rotate(', \\n            OStrings.toString(rotate), ' ', center, ' ', center, ')\\\" />'));\\n    }\\n\\n    function hexColorString(uint256 r, uint256 g, uint256 b, uint256 a) public pure returns (string memory) {\\n        return OStrings.toHexColorString((r << 16) | (g << 8) | b, a);\\n    }\\n\\n    function rgbaColorString(uint256 r, uint256 g, uint256 b, string memory a) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            'rgba(', \\n            OStrings.toString(r), ', ', \\n            OStrings.toString(g), ', ', \\n            OStrings.toString(b), ', ', \\n            a,\\n            ')'\\n        ));\\n    }\\n\\n    function generateGradient(string memory startColor, string memory endColor, uint256 index) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '<linearGradient id=\\\"paint', OStrings.toString(index), '\\\"> <stop stop-color=\\\"', startColor, '\\\"/> <stop offset=\\\"0.5\\\" stop-color=\\\"',\\n            endColor, '\\\"/></linearGradient>'));\\n\\n    }\\n}\",\"keccak256\":\"0x06c2e2ad09d3eedf42276153c8c53a0e2b23cce34921cac77297d44c3c69a025\",\"license\":\"MIT\"},\"contracts/interfaces/IPortfolioNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"./IPriceFetcher.sol\\\";\\n\\ninterface IPortfolioNFT is IERC721 {\\n    function priceFetcher() external view returns (IPriceFetcher);\\n    function baseTokenAddress() external view returns (address);\\n    function tokenAddresses() external view returns (address);\\n    function WETHAddress() external view returns (address);\\n    function WETHSymbol() external view returns (string memory);\\n    function getPricePath(uint256 _tokenId, address _tokenAddress) external view returns (address[] memory);\\n    function getTokenAddresses(uint256 tokenId) external view returns (address[] memory);\\n}\",\"keccak256\":\"0x800c0b754921c0fa69846afe8580f5129ff5f7ac1185f70a89e2cfda7d2bf5c4\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFetcher {\\n    function quote(address[] memory _path) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x2f1ab163cd2c0e4af11b5faee22ed7d1b4a6ad4fe564750d4cf95ed6973a7e1b\",\"license\":\"MIT\"},\"contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\",\"keccak256\":\"0x7b82b53675414e1ce88750b376660e21943bdddbb1f5b46bf98703e105ac0c9d\",\"license\":\"MIT\"},\"contracts/libraries/CustomSort.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.5.15;\\n\\nimport \\\"./../structs/PortfolioData.sol\\\";\\n\\n/**\\n * @title Quicksort library in Solidity\\n * @author Subhod I (https://gist.github.com/subhodi/b3b86cc13ad2636420963e692a4d896f)\\n */\\nlibrary CustomSort {\\n    function sort(uint256[] memory arr, int left, int right) internal view {\\n        int i = left;\\n        int j = right;\\n        if(i==j) return;\\n        uint256 pivot = arr[uint(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint(i)] > pivot) i++;\\n            while (pivot > arr[uint(j)]) j--;\\n            if (i <= j) {\\n                uint tmp = arr[uint(j)];\\n                arr[uint(j)] = arr[uint(i)];\\n                arr[uint(i)] = tmp;\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j)\\n            sort(arr, left, j);\\n        if (i < right)\\n            sort(arr, i, right);\\n    }\\n \\n\\n    function sortByValue(AddressBalanceValue[] memory arr, int left, int right) internal view {\\n        int i = left;\\n        int j = right;\\n        if(i==j) return;\\n        AddressBalanceValue memory pivot = arr[uint(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint(i)].value > pivot.value) i++;\\n            while (pivot.value > arr[uint(j)].value) j--;\\n            if (i <= j) {\\n                AddressBalanceValue memory tmp = arr[uint(j)];\\n                arr[uint(j)] = arr[uint(i)];\\n                arr[uint(i)] = tmp;\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j)\\n            sortByValue(arr, left, j);\\n        if (i < right)\\n            sortByValue(arr, i, right);\\n    }\\n}\",\"keccak256\":\"0x4560b71496ff53e4f40df1ce65d7bb38e026f8c84e4213854670be198672ce2f\",\"license\":\"Unlicense\"},\"contracts/libraries/OStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary OStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint256 private constant MAX_UINT256_STRING_LENGTH = 78;\\n    uint8 private constant ASCII_DIGIT_OFFSET = 48;\\n\\n    /// @dev Converts a `uint256` value to a string.\\n    /// @param n The integer to convert.\\n    /// @return nstr `n` as a decimal string.\\n    /// Source: https://github.com/mzhu25/sol2string\\n    function toString(uint256 n) \\n        internal \\n        pure \\n        returns (string memory nstr) \\n    {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        }\\n        // Overallocate memory\\n        nstr = new string(MAX_UINT256_STRING_LENGTH);\\n        uint256 k = MAX_UINT256_STRING_LENGTH;\\n        // Populate string from right to left (lsb to msb).\\n        while (n != 0) {\\n            assembly {\\n                let char := add(\\n                    ASCII_DIGIT_OFFSET,\\n                    mod(n, 10)\\n                )\\n                mstore(add(nstr, k), char)\\n                k := sub(k, 1)\\n                n := div(n, 10)\\n            }\\n        }\\n        assembly {\\n            // Shift pointer over to actual start of string.\\n            nstr := add(nstr, k)\\n            // Store actual string length.\\n            mstore(nstr, sub(MAX_UINT256_STRING_LENGTH, k))\\n        }\\n        return nstr;\\n    }\\n\\n    function toStringCommaFormatWithDecimals(uint256 n, uint256 d) \\n        internal \\n        pure \\n        returns (string memory nstr) \\n    {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        }\\n        // Overallocate memory\\n        nstr = new string(MAX_UINT256_STRING_LENGTH);\\n        uint256 k = MAX_UINT256_STRING_LENGTH;\\n        uint256 count = 0;\\n        // Populate string from right to left (lsb to msb).\\n        while (n != 0) {\\n            assembly {\\n                let char := add(\\n                    ASCII_DIGIT_OFFSET,\\n                    mod(n, 10)\\n                )\\n                mstore(add(nstr, k), char)\\n                k := sub(k, 1)\\n                n := div(n, 10)\\n                count := add(count, 1)\\n            }\\n\\n            if (count % 3 == 0 && n != 0 && count != d) {\\n                assembly {\\n                    let char := 44 // ,\\n                    mstore(add(nstr, k), char)\\n                    k := sub(k, 1)\\n                }\\n            } else \\n            if (count == d) {\\n                assembly {\\n                    let char := 46 // .\\n                    mstore(add(nstr, k), char)\\n                    k := sub(k, 1)\\n                }\\n                if (n == 0) {\\n                    assembly {\\n                        let char := add(\\n                            ASCII_DIGIT_OFFSET,\\n                            mod(n, 10)\\n                        )\\n                        mstore(add(nstr, k), char)\\n                        k := sub(k, 1)\\n                    }\\n                }\\n            }\\n        }\\n        assembly {\\n            // Shift pointer over to actual start of string.\\n            nstr := add(nstr, k)\\n            // Store actual string length.\\n            mstore(nstr, sub(MAX_UINT256_STRING_LENGTH, k))\\n        }\\n        return nstr;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an int to \\n     */\\n    function toHexColorString(uint256 value, uint256 opacity) internal pure returns (string memory) {\\n        require(value <= 0xffffff, \\\"Value greater than 0xffffff\\\");\\n        require(opacity <= 0xff, \\\"Opacity greater than 0xff\\\");\\n        value = value << 8 | opacity;\\n        bytes memory buffer = new bytes(11);\\n        buffer[0] = \\\"#\\\";\\n        for (uint256 i = 9; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\",\"keccak256\":\"0x0c7223ee1b2257fe15cceeee76cc36080d4041c42919ee68afd94c4d6c2b3604\",\"license\":\"MIT\"},\"contracts/structs/AddressBalanceValue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct AddressBalanceValue {\\n    address addr;\\n    uint256 balance;\\n    uint256 value;\\n}\",\"keccak256\":\"0x46f844157eb59a9598eeadb0c8f78e3e570dccccf82590584b86a33fae492261\",\"license\":\"MIT\"},\"contracts/structs/PortfolioData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressBalanceValue.sol\\\";\\n\\nstruct PortfolioData {\\n    uint256 tokenId;\\n    uint256 totalValue;\\n    uint256 otherValue;\\n    AddressBalanceValue[4] topTokens;\\n}\",\"keccak256\":\"0x4a408f676709628097e12a16f6e1cb83512cac407842c91b33bd726acd398ad6\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004baf38038062004baf8339818101604052810190620000379190620000f6565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000170565b600081519050620000f08162000156565b92915050565b6000602082840312156200010957600080fd5b60006200011984828501620000df565b91505092915050565b60006200012f8262000136565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001618162000122565b81146200016d57600080fd5b50565b614a2f80620001806000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635e5ca9871161005b5780635e5ca9871461014d578063c87b56dd1461017d578063cce7065c146101ad578063d61b051b146101dd57610088565b80633c2c5cb61461008d57806343adc6be146100bd5780634bdcdcf3146100ed578063539cf0381461011d575b600080fd5b6100a760048036038101906100a2919061272a565b61020d565b6040516100b491906136a2565b60405180910390f35b6100d760048036038101906100d29190612660565b610284565b6040516100e49190613744565b60405180910390f35b610107600480360381019061010291906125e1565b610c87565b60405161011491906136a2565b60405180910390f35b610137600480360381019061013291906127f4565b610cbe565b60405161014491906136a2565b60405180910390f35b61016760048036038101906101629190612779565b610ce0565b60405161017491906136a2565b60405180910390f35b61019760048036038101906101929190612660565b610d2a565b6040516101a491906136a2565b60405180910390f35b6101c760048036038101906101c2919061272a565b611758565b6040516101d491906136a2565b60405180910390f35b6101f760048036038101906101f291906126b2565b6117f4565b6040516102049190613760565b60405180910390f35b60606000610228600261012c6102239190613a07565b6118be565b9050610233836118be565b61023c856118be565b8283848561025560028c6102509190613a07565b6118be565b60405160200161026b9796959493929190613533565b6040516020818303038152906040529150509392505050565b61028c612285565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c591a491846040518263ffffffff1660e01b81526004016102e99190613760565b60006040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061033e9190612536565b90506000815167ffffffffffffffff811115610383577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103bc57816020015b6103a96122b3565b8152602001906001900390816103a15790505b5090506103c7612285565b8481600001818152505060005b8351811015610b49576000848281518110610418577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663738a018289846040518363ffffffff1660e01b815260040161048192919061377b565b60006040518083038186803b15801561049957600080fd5b505afa1580156104ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104d69190612536565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610514575050610b36565b6000829050600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632421d7266040518163ffffffff1660e01b815260040160206040518083038186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc9190612577565b73ffffffffffffffffffffffffffffffffffffffff166327987afa856040518263ffffffff1660e01b81526004016105f49190613680565b604080518083038186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064391906126ee565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8f6040518263ffffffff1660e01b81526004016106c09190613760565b60206040518083038186803b1580156106d857600080fd5b505afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610710919061250d565b6040518263ffffffff1660e01b815260040161072c9190613665565b60206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190612689565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630af88b246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e657600080fd5b505afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e919061250d565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561092157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b81526004016108ac9190613760565b60206040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc919061250d565b73ffffffffffffffffffffffffffffffffffffffff16318161091e9190613947565b90505b60008260036109309190613947565b600a61093c9190613a8b565b82856109489190613ba9565b6109529190613a07565b905060038573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d49190612857565b60ff166109e19190613c97565b600a6109ed9190613a8b565b816109f89190613a07565b905060038573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4257600080fd5b505afa158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190612857565b60ff16610a879190613c97565b600a610a939190613a8b565b82610a9e9190613a07565b915060405180606001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152508a8981518110610b0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508089602001818151610b279190613947565b91508181525050505050505050505b8080610b4190613e5f565b9150506103d4565b50610b6382600060018551610b5e9190613c97565b6119bb565b60005b8351811015610c7b576000838281518110610baa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015190506003821115610be0578083604001818151610bd39190613947565b9150818152505050610c68565b838281518110610c19577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183606001518360048110610c5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181905250505b8080610c7390613e5f565b915050610b66565b50809350505050919050565b6060610c92826118be565b8484604051602001610ca69392919061346f565b60405160208183030381529060405290509392505050565b6060610cd683600886901b601088901b171783611c75565b9050949350505050565b6060610ceb856118be565b610cf4856118be565b610cfd856118be565b84604051602001610d1194939291906135f0565b6040516020818303038152906040529050949350505050565b60606000806040518060a00160405280607b815260200161497f607b91399050610d526122ea565b60005b6004811015610e8257610e2e610d77878680610d7090613e5f565b97506117f4565b610d8d888780610d8690613e5f565b98506117f4565b610da3898880610d9c90613e5f565b99506117f4565b6000600286610db29190613ed6565b14610df2576040518060400160405280600381526020017f302e310000000000000000000000000000000000000000000000000000000000815250610e29565b6040518060400160405280600381526020017f302e3400000000000000000000000000000000000000000000000000000000008152505b610ce0565b828260048110610e67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052508080610e7a90613e5f565b915050610d55565b5081610f0c82600060048110610ec1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015183600160048110610f00577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516000610c87565b610f9483600260048110610f49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015184600360048110610f88577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516001610c87565b604051602001610fa6939291906132e1565b60405160208183030381529060405291506000610fc286610284565b90506000600a606460ff6103e8610fe58b8a80610fde90613e5f565b9b506117f4565b610fef9190613ba9565b610ff99190613a07565b6110039190613a07565b605061012c6110129190613c97565b61101c9190613ba9565b6110269190613a07565b60506110329190613947565b90506000600a606460ff6103e86110558c8b8061104e90613e5f565b9c506117f4565b61105f9190613ba9565b6110699190613a07565b6110739190613a07565b605061012c6110829190613c97565b61108c9190613ba9565b6110969190613a07565b60506110a29190613947565b9050818111156110b9576000829050819250809150505b600060086110d38a89806110cc90613e5f565b9a506117f4565b6110dd9190613ed6565b602d6110e99190613ba9565b9050600060086111058b8a806110fe90613e5f565b9b506117f4565b61110f9190613ed6565b602d61111b9190613ba9565b905060008060026111388d8c8061113190613e5f565b9d506117f4565b6111429190613ed6565b146111585761115385846000611758565b611165565b6111648584600061020d565b5b905060008060026111828e8d8061117b90613e5f565b9e506117f4565b61118c9190613ed6565b146111a25761119d85846001611758565b6111af565b6111ae8584600161020d565b5b90508882826040516020016111c693929190613124565b6040516020818303038152906040529850886111e18d6118be565b6040516020016111f2929190613355565b604051602081830303815290604052985060005b876060015150600481101561163a57600088606001518260048110611254577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015160000151905060008960600151836004811061129e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015160400151905060008a6060015184600481106112e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151602001519050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561133057505050611627565b60008390506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630af88b246040518163ffffffff1660e01b815260040160206040518083038186803b15801561139f57600080fd5b505afa1580156113b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d7919061250d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156114b457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357ba7046040518163ffffffff1660e01b815260040160006040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114af91906125a0565b611538565b8173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156114fa57600080fd5b505afa15801561150e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061153791906125a0565b5b90508e61155c87602d61154b9190613ba9565b60646115579190613947565b6118be565b8260405160200161156f9392919061323d565b6040516020818303038152906040529e508e6115a287602d6115919190613ba9565b606461159d9190613947565b6118be565b6115ae866103e7611f4a565b6040516020016115c093929190613155565b6040516020818303038152906040529e508e6115f387602d6115e29190613ba9565b60726115ee9190613947565b6118be565b6115fe856003611f4a565b6040516020016116109392919061328f565b6040516020818303038152906040529e5050505050505b808061163290613e5f565b915050611206565b508860405160200161164c91906131e1565b60405160208183030381529060405298508861166e88604001516103e7611f4a565b60405160200161167f9291906131a7565b6040516020818303038152906040529850886116a188602001516103e7611f4a565b6040516020016116b2929190613203565b6040516020818303038152906040529850886040516020016116d49190613333565b604051602081830303815290604052985060006117216116f38e6118be565b6116fc8c6120c7565b60405160200161170d9291906134cc565b6040516020818303038152906040526120c7565b9050806040516020016117349190613511565b6040516020818303038152906040529950899b505050505050505050505050919050565b6060600061177e60028661012c61176f9190613c97565b6117799190613a07565b6118be565b90506000611799600261012c6117949190613a07565b6118be565b90506117a4846118be565b82836117af896118be565b6117b88a6118be565b6117c18a6118be565b86876040516020016117da98979695949392919061338f565b604051602081830303815290604052925050509392505050565b600060208210611839576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183090613724565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460405160200161186f9291906130f8565b60405160208183030381529060405280519060200120905060006008846118969190613ba9565b60ff901b60001b90506008846118ac9190613ba9565b818316901c60001c9250505092915050565b60606000821415611906576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119b6565b604e67ffffffffffffffff811115611947577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119795781602001600182028036833780820191505090505b5090506000604e90505b600083146119a957600a83066030018082840152600182039150600a8404935050611983565b808201915080604e038252505b919050565b60008290506000829050808214156119d4575050611c70565b600085600286866119e59190613c03565b6119ef919061399d565b866119fa91906138b3565b81518110611a31577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190505b818313611c44575b8060400151868481518110611a82577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604001511115611aa7578280611a9f90613e16565b935050611a44565b5b858281518110611ae1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015181604001511115611b0b578180611b0390613d72565b925050611aa8565b818313611c3f576000868381518110611b4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050868481518110611b90577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151878481518110611bd1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080878581518110611c16577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508380611c2c90613e16565b9450508280611c3a90613d72565b935050505b611a3c565b81851215611c5857611c578686846119bb565b5b83831215611c6c57611c6b8684866119bb565b5b5050505b505050565b606062ffffff831115611cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb490613704565b60405180910390fd5b60ff821115611d01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf8906136e4565b60405180910390fd5b81600884901b1792506000600b67ffffffffffffffff811115611d4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d7f5781602001600182028036833780820191505090505b5090507f230000000000000000000000000000000000000000000000000000000000000081600081518110611ddd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600990505b6001811115611efc577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611e78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611eb5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611ef590613dbb565b9050611e13565b5060008414611f40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f37906136c4565b60405180910390fd5b8091505092915050565b60606000831415611f92576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120c1565b604e67ffffffffffffffff811115611fd3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120055781602001600182028036833780820191505090505b5090506000604e905060005b600085146120b357600a85066030018083850152600183039250600a860495506001820191505060006003826120479190613ed6565b148015612055575060008514155b80156120615750838114155b1561207957602c8083850152600183039250506120ae565b838114156120ad57602e80838501526001830392505060008514156120ac57600a85066030018083850152600183039250505b5b5b612011565b818301925081604e03835250505b92915050565b606060008251905060008114156120f05760405180602001604052806000815250915050612280565b600060036002836121019190613947565b61210b9190613a07565b60046121179190613ba9565b905060006020826121289190613947565b67ffffffffffffffff811115612167577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121995781602001600182028036833780820191505090505b509050600060405180606001604052806040815260200161493f604091399050600181016020830160005b8681101561223d5760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b905080845260048401935050506121c4565b506003860660018114612257576002811461226757612272565b613d3d60f01b6002830352612272565b603d60f81b60018303525b508484525050819450505050505b919050565b60405180608001604052806000815260200160008152602001600081526020016122ad612311565b81525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60405180608001604052806004905b60608152602001906001900390816122f95790505090565b60405180608001604052806004905b6123286122b3565b8152602001906001900390816123205790505090565b600061235161234c846137c9565b6137a4565b9050808382526020820190508285602086028201111561237057600080fd5b60005b858110156123a057816123868882612426565b845260208401935060208301925050600181019050612373565b5050509392505050565b60006123bd6123b8846137f5565b6137a4565b9050828152602081018484840111156123d557600080fd5b6123e0848285613d30565b509392505050565b60006123fb6123f6846137f5565b6137a4565b90508281526020810184848401111561241357600080fd5b61241e848285613d3f565b509392505050565b600081519050612435816148e2565b92915050565b600082601f83011261244c57600080fd5b815161245c84826020860161233e565b91505092915050565b600081519050612474816148f9565b92915050565b600082601f83011261248b57600080fd5b813561249b8482602086016123aa565b91505092915050565b600082601f8301126124b557600080fd5b81516124c58482602086016123e8565b91505092915050565b6000813590506124dd81614910565b92915050565b6000815190506124f281614910565b92915050565b60008151905061250781614927565b92915050565b60006020828403121561251f57600080fd5b600061252d84828501612426565b91505092915050565b60006020828403121561254857600080fd5b600082015167ffffffffffffffff81111561256257600080fd5b61256e8482850161243b565b91505092915050565b60006020828403121561258957600080fd5b600061259784828501612465565b91505092915050565b6000602082840312156125b257600080fd5b600082015167ffffffffffffffff8111156125cc57600080fd5b6125d8848285016124a4565b91505092915050565b6000806000606084860312156125f657600080fd5b600084013567ffffffffffffffff81111561261057600080fd5b61261c8682870161247a565b935050602084013567ffffffffffffffff81111561263957600080fd5b6126458682870161247a565b9250506040612656868287016124ce565b9150509250925092565b60006020828403121561267257600080fd5b6000612680848285016124ce565b91505092915050565b60006020828403121561269b57600080fd5b60006126a9848285016124e3565b91505092915050565b600080604083850312156126c557600080fd5b60006126d3858286016124ce565b92505060206126e4858286016124ce565b9150509250929050565b6000806040838503121561270157600080fd5b600061270f858286016124e3565b9250506020612720858286016124e3565b9150509250929050565b60008060006060848603121561273f57600080fd5b600061274d868287016124ce565b935050602061275e868287016124ce565b925050604061276f868287016124ce565b9150509250925092565b6000806000806080858703121561278f57600080fd5b600061279d878288016124ce565b94505060206127ae878288016124ce565b93505060406127bf878288016124ce565b925050606085013567ffffffffffffffff8111156127dc57600080fd5b6127e88782880161247a565b91505092959194509250565b6000806000806080858703121561280a57600080fd5b6000612818878288016124ce565b9450506020612829878288016124ce565b935050604061283a878288016124ce565b925050606061284b878288016124ce565b91505092959194509250565b60006020828403121561286957600080fd5b6000612877848285016124f8565b91505092915050565b600061288c83836128b0565b60208301905092915050565b60006128a4838361302b565b60608301905092915050565b6128b981613ccb565b82525050565b6128c881613ccb565b82525050565b6128df6128da82613ccb565b613ea8565b82525050565b60006128f082613840565b6128fa818561387b565b935061290583613826565b8060005b8381101561293657815161291d8882612880565b975061292883613861565b925050600181019050612909565b5085935050505092915050565b61294c8161384b565b612956818461388c565b925061296182613836565b8060005b838110156129925781516129798782612898565b96506129848361386e565b925050600181019050612965565b505050505050565b60006129a582613856565b6129af8185613897565b93506129bf818560208601613d3f565b6129c881613f94565b840191505092915050565b60006129de82613856565b6129e881856138a8565b93506129f8818560208601613d3f565b80840191505092915050565b6000612a11602083613897565b9150612a1c82613fbf565b602082019050919050565b6000612a346006836138a8565b9150612a3f82613fe8565b600682019050919050565b6000612a5760a9836138a8565b9150612a6282614011565b60a982019050919050565b6000612a7a6005836138a8565b9150612a85826140f8565b600582019050919050565b6000612a9d6011836138a8565b9150612aa882614121565b601182019050919050565b6000612ac06008836138a8565b9150612acb8261414a565b600882019050919050565b6000612ae36023836138a8565b9150612aee82614173565b602382019050919050565b6000612b066024836138a8565b9150612b11826141c2565b602482019050919050565b6000612b296016836138a8565b9150612b3482614211565b601682019050919050565b6000612b4c600a836138a8565b9150612b578261423a565b600a82019050919050565b6000612b6f601983613897565b9150612b7a82614263565b602082019050919050565b6000612b926031836138a8565b9150612b9d8261428c565b603182019050919050565b6000612bb56019836138a8565b9150612bc0826142db565b601982019050919050565b6000612bd8602e836138a8565b9150612be382614304565b602e82019050919050565b6000612bfb6001836138a8565b9150612c0682614353565b600182019050919050565b6000612c1e6010836138a8565b9150612c298261437c565b601082019050919050565b6000612c416014836138a8565b9150612c4c826143a5565b601482019050919050565b6000612c646001836138a8565b9150612c6f826143ce565b600182019050919050565b6000612c876001836138a8565b9150612c92826143f7565b600182019050919050565b6000612caa6004836138a8565b9150612cb582614420565b600482019050919050565b6000612ccd600f836138a8565b9150612cd882614449565b600f82019050919050565b6000612cf0601b836138a8565b9150612cfb82614472565b601b82019050919050565b6000612d136002836138a8565b9150612d1e8261449b565b600282019050919050565b6000612d366007836138a8565b9150612d41826144c4565b600782019050919050565b6000612d596005836138a8565b9150612d64826144ed565b600582019050919050565b6000612d7c6007836138a8565b9150612d8782614516565b600782019050919050565b6000612d9f6022836138a8565b9150612daa8261453f565b602282019050919050565b6000612dc26014836138a8565b9150612dcd8261458e565b601482019050919050565b6000612de5601b83613897565b9150612df0826145b7565b602082019050919050565b6000612e086010836138a8565b9150612e13826145e0565b601082019050919050565b6000612e2b6015836138a8565b9150612e3682614609565b601582019050919050565b6000612e4e6006836138a8565b9150612e5982614632565b600682019050919050565b6000612e716002836138a8565b9150612e7c8261465b565b600282019050919050565b6000612e94601d836138a8565b9150612e9f82614684565b601d82019050919050565b6000612eb7601483613897565b9150612ec2826146ad565b602082019050919050565b6000612eda6005836138a8565b9150612ee5826146d6565b600582019050919050565b6000612efd6013836138a8565b9150612f08826146ff565b601382019050919050565b6000612f206000836138a8565b9150612f2b82614728565b600082019050919050565b6000612f436006836138a8565b9150612f4e8261472b565b600682019050919050565b6000612f666006836138a8565b9150612f7182614754565b600682019050919050565b6000612f896028836138a8565b9150612f948261477d565b602882019050919050565b6000612fac6018836138a8565b9150612fb7826147cc565b601882019050919050565b6000612fcf6005836138a8565b9150612fda826147f5565b600582019050919050565b6000612ff26072836138a8565b9150612ffd8261481e565b607282019050919050565b60006130156015836138a8565b9150613020826148b9565b601582019050919050565b60608201600082015161304160008501826128b0565b50602082015161305460208501826130c3565b50604082015161306760408501826130c3565b50505050565b6101e08201600082015161308460008501826130c3565b50602082015161309760208501826130c3565b5060408201516130aa60408501826130c3565b5060608201516130bd6060850182612943565b50505050565b6130cc81613d19565b82525050565b6130db81613d19565b82525050565b6130f26130ed82613d19565b613ecc565b82525050565b600061310482856128ce565b60148201915061311482846130e1565b6020820191508190509392505050565b600061313082866129d3565b915061313c82856129d3565b915061314882846129d3565b9150819050949350505050565b600061316182866129d3565b915061316c82612a90565b915061317882856129d3565b915061318382612c11565b915061318f82846129d3565b915061319a82612d29565b9150819050949350505050565b60006131b382856129d3565b91506131be82612af9565b91506131ca82846129d3565b91506131d582612d29565b91508190509392505050565b60006131ed82846129d3565b91506131f882612bcb565b915081905092915050565b600061320f82856129d3565b915061321a82612d92565b915061322682846129d3565b915061323182612d29565b91508190509392505050565b600061324982866129d3565b915061325482612dfb565b915061326082856129d3565b915061326b82612cc0565b915061327782846129d3565b915061328282612d29565b9150819050949350505050565b600061329b82866129d3565b91506132a682612dfb565b91506132b282856129d3565b91506132bd82612ef0565b91506132c982846129d3565b91506132d482612d29565b9150819050949350505050565b60006132ed82866129d3565b91506132f882612f36565b915061330482856129d3565b915061331082846129d3565b915061331b82612a4a565b915061332682612b85565b9150819050949350505050565b600061333f82846129d3565b915061334a82612f59565b915081905092915050565b600061336182856129d3565b915061336c82612f7c565b915061337882846129d3565b915061338382612d29565b91508190509392505050565b600061339a82612b1c565b91506133a6828b6129d3565b91506133b182612e41565b91506133bd828a6129d3565b91506133c882612ecd565b91506133d482896129d3565b91506133df82612c7a565b91506133ea82612ab3565b91506133f682886129d3565b915061340182612b3f565b915061340d82876129d3565b915061341882612db5565b915061342482866129d3565b915061342f82612c57565b915061343b82856129d3565b915061344682612c57565b915061345282846129d3565b915061345d82612a6d565b91508190509998505050505050505050565b600061347a82612ba8565b915061348682866129d3565b915061349182613008565b915061349d82856129d3565b91506134a882612ad6565b91506134b482846129d3565b91506134bf82612c34565b9150819050949350505050565b60006134d782612ce3565b91506134e382856129d3565b91506134ee82612fe5565b91506134fa82846129d3565b915061350582612d06565b91508190509392505050565b600061351c82612e87565b915061352882846129d3565b915081905092915050565b600061353e82612f9f565b915061354a828a6129d3565b915061355582612e1e565b915061356182896129d3565b915061356c82612f13565b915061357882886129d3565b915061358382612c57565b915061358f82876129d3565b915061359a82612d6f565b91506135a682866129d3565b91506135b182612a27565b91506135bd82856129d3565b91506135c882612d4c565b91506135d482846129d3565b91506135df82612c9d565b915081905098975050505050505050565b60006135fb82612fc2565b915061360782876129d3565b915061361282612e64565b915061361e82866129d3565b915061362982612e64565b915061363582856129d3565b915061364082612e64565b915061364c82846129d3565b915061365782612bee565b915081905095945050505050565b600060208201905061367a60008301846128bf565b92915050565b6000602082019050818103600083015261369a81846128e5565b905092915050565b600060208201905081810360008301526136bc818461299a565b905092915050565b600060208201905081810360008301526136dd81612a04565b9050919050565b600060208201905081810360008301526136fd81612b62565b9050919050565b6000602082019050818103600083015261371d81612dd8565b9050919050565b6000602082019050818103600083015261373d81612eaa565b9050919050565b60006101e08201905061375a600083018461306d565b92915050565b600060208201905061377560008301846130d2565b92915050565b600060408201905061379060008301856130d2565b61379d60208301846128bf565b9392505050565b60006137ae6137bf565b90506137ba8282613de5565b919050565b6000604051905090565b600067ffffffffffffffff8211156137e4576137e3613f65565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156138105761380f613f65565b5b61381982613f94565b9050602081019050919050565b6000819050602082019050919050565b6000819050919050565b600081519050919050565b600060049050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006138be82613cef565b91506138c983613cef565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561390457613903613f07565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561393c5761393b613f07565b5b828201905092915050565b600061395282613d19565b915061395d83613d19565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561399257613991613f07565b5b828201905092915050565b60006139a882613cef565b91506139b383613cef565b9250826139c3576139c2613f36565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156139fc576139fb613f07565b5b828205905092915050565b6000613a1282613d19565b9150613a1d83613d19565b925082613a2d57613a2c613f36565b5b828204905092915050565b6000808291508390505b6001851115613a8257808604811115613a5e57613a5d613f07565b5b6001851615613a6d5780820291505b8081029050613a7b85613fb2565b9450613a42565b94509492505050565b6000613a9682613d19565b9150613aa183613d19565b9250613ace7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613ad6565b905092915050565b600082613ae65760019050613ba2565b81613af45760009050613ba2565b8160018114613b0a5760028114613b1457613b43565b6001915050613ba2565b60ff841115613b2657613b25613f07565b5b8360020a915084821115613b3d57613b3c613f07565b5b50613ba2565b5060208310610133831016604e8410600b8410161715613b785782820a905083811115613b7357613b72613f07565b5b613ba2565b613b858484846001613a38565b92509050818404811115613b9c57613b9b613f07565b5b81810290505b9392505050565b6000613bb482613d19565b9150613bbf83613d19565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613bf857613bf7613f07565b5b828202905092915050565b6000613c0e82613cef565b9150613c1983613cef565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615613c5457613c53613f07565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615613c8c57613c8b613f07565b5b828203905092915050565b6000613ca282613d19565b9150613cad83613d19565b925082821015613cc057613cbf613f07565b5b828203905092915050565b6000613cd682613cf9565b9050919050565b6000613ce882613ccb565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613d5d578082015181840152602081019050613d42565b83811115613d6c576000848401525b50505050565b6000613d7d82613cef565b91507f8000000000000000000000000000000000000000000000000000000000000000821415613db057613daf613f07565b5b600182039050919050565b6000613dc682613d19565b91506000821415613dda57613dd9613f07565b5b600182039050919050565b613dee82613f94565b810181811067ffffffffffffffff82111715613e0d57613e0c613f65565b5b80604052505050565b6000613e2182613cef565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e5457613e53613f07565b5b600182019050919050565b6000613e6a82613d19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e9d57613e9c613f07565b5b600182019050919050565b6000613eb382613eba565b9050919050565b6000613ec582613fa5565b9050919050565b6000819050919050565b6000613ee182613d19565b9150613eec83613d19565b925082613efc57613efb613f36565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f222063793d220000000000000000000000000000000000000000000000000000600082015250565b7f3c7374796c653e2e62617365207b20666f6e743a20626f6c642033307078207360008201527f616e732d73657269663b2066696c6c3a2077686974657d2e6974656d207b206660208201527f6f6e743a206e6f726d616c20323470782073616e732d73657269663b2066696c60408201527f6c3a2077686974657d2e737562207b20666f6e743a206e6f726d616c2031347060608201527f782073616e732d73657269663b2066696c6c3a2077686974657d3c2f7374796c60808201527f653e3c2f646566733e000000000000000000000000000000000000000000000060a082015250565b7f2922202f3e000000000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d223135302220793d22000000000000000000000000000000600082015250565b7f2077696474683d22000000000000000000000000000000000000000000000000600082015250565b7f222f3e203c73746f70206f66667365743d22302e35222073746f702d636f6c6f60008201527f723d220000000000000000000000000000000000000000000000000000000000602082015250565b7f3c7465787420783d223135302220793d223238302220636c6173733d2269746560008201527f6d223e2400000000000000000000000000000000000000000000000000000000602082015250565b7f3c726563742066696c6c3d2275726c28237061696e7400000000000000000000600082015250565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b7f4f7061636974792067726561746572207468616e203078666600000000000000600082015250565b7f3c726563742077696474683d223130302522206865696768743d22313030252260008201527f2066696c6c3d2223323732373237222f3e000000000000000000000000000000602082015250565b7f3c6c696e6561724772616469656e742069643d227061696e7400000000000000600082015250565b7f3c7465787420783d2232302220793d223238302220636c6173733d226974656d60008201527f223e4f746865723c2f746578743e000000000000000000000000000000000000602082015250565b7f2900000000000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226974656d223e2400000000000000000000000000000000600082015250565b7f222f3e3c2f6c696e6561724772616469656e743e000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b7f22202f3e00000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226974656d223e0000000000000000000000000000000000600082015250565b7f7b226e616d65223a202242616c616e6365205761746368657220230000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f746578743e00000000000000000000000000000000000000000000000000600082015250565b7f2220723d22000000000000000000000000000000000000000000000000000000600082015250565b7f29222063783d2200000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d2232302220793d2235382220636c6173733d22626173652260008201527f3e24000000000000000000000000000000000000000000000000000000000000602082015250565b7f22207472616e73666f726d3d22726f7461746528000000000000000000000000600082015250565b7f56616c75652067726561746572207468616e2030786666666666660000000000600082015250565b7f3c7465787420783d2232302220793d2200000000000000000000000000000000600082015250565b7f2922207472616e73666f726d3d22726f74617465280000000000000000000000600082015250565b7f292220783d220000000000000000000000000000000000000000000000000000600082015250565b7f2c20000000000000000000000000000000000000000000000000000000000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4f6666736574206f7574206f6620626f756e6473000000000000000000000000600082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226261736520737562223e00000000000000000000000000600082015250565b50565b7f3c646566733e0000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d2232302220793d2233302220636c6173733d22737562223e60008201527f57616c6c65742023000000000000000000000000000000000000000000000000602082015250565b7f3c636972636c652066696c6c3d2275726c28237061696e740000000000000000600082015250565b7f7267626128000000000000000000000000000000000000000000000000000000600082015250565b7f222c20226465736372697074696f6e223a202254686973204e4654206469737060008201527f6c61797320697473206f776e6572732062616c616e636573206f66207472616360208201527f6b656420746f6b656e732e222c2022696d616765223a2022646174613a696d6160408201527f67652f7376672b786d6c3b6261736536342c0000000000000000000000000000606082015250565b7f223e203c73746f702073746f702d636f6c6f723d220000000000000000000000600082015250565b6148eb81613ccb565b81146148f657600080fd5b50565b61490281613cdd565b811461490d57600080fd5b50565b61491981613d19565b811461492457600080fd5b50565b61493081613d23565b811461493b57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222077696474683d2233303022206865696768743d22333030222076696577426f783d223020302033303020333030223ea2646970667358221220940afc345c7e4acb7d315bba1a63ea0cbcbb648af1639bacfe11ccc33a4ad4ea64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80635e5ca9871161005b5780635e5ca9871461014d578063c87b56dd1461017d578063cce7065c146101ad578063d61b051b146101dd57610088565b80633c2c5cb61461008d57806343adc6be146100bd5780634bdcdcf3146100ed578063539cf0381461011d575b600080fd5b6100a760048036038101906100a2919061272a565b61020d565b6040516100b491906136a2565b60405180910390f35b6100d760048036038101906100d29190612660565b610284565b6040516100e49190613744565b60405180910390f35b610107600480360381019061010291906125e1565b610c87565b60405161011491906136a2565b60405180910390f35b610137600480360381019061013291906127f4565b610cbe565b60405161014491906136a2565b60405180910390f35b61016760048036038101906101629190612779565b610ce0565b60405161017491906136a2565b60405180910390f35b61019760048036038101906101929190612660565b610d2a565b6040516101a491906136a2565b60405180910390f35b6101c760048036038101906101c2919061272a565b611758565b6040516101d491906136a2565b60405180910390f35b6101f760048036038101906101f291906126b2565b6117f4565b6040516102049190613760565b60405180910390f35b60606000610228600261012c6102239190613a07565b6118be565b9050610233836118be565b61023c856118be565b8283848561025560028c6102509190613a07565b6118be565b60405160200161026b9796959493929190613533565b6040516020818303038152906040529150509392505050565b61028c612285565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c591a491846040518263ffffffff1660e01b81526004016102e99190613760565b60006040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061033e9190612536565b90506000815167ffffffffffffffff811115610383577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103bc57816020015b6103a96122b3565b8152602001906001900390816103a15790505b5090506103c7612285565b8481600001818152505060005b8351811015610b49576000848281518110610418577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663738a018289846040518363ffffffff1660e01b815260040161048192919061377b565b60006040518083038186803b15801561049957600080fd5b505afa1580156104ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104d69190612536565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610514575050610b36565b6000829050600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632421d7266040518163ffffffff1660e01b815260040160206040518083038186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc9190612577565b73ffffffffffffffffffffffffffffffffffffffff166327987afa856040518263ffffffff1660e01b81526004016105f49190613680565b604080518083038186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064391906126ee565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8f6040518263ffffffff1660e01b81526004016106c09190613760565b60206040518083038186803b1580156106d857600080fd5b505afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610710919061250d565b6040518263ffffffff1660e01b815260040161072c9190613665565b60206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190612689565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630af88b246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e657600080fd5b505afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e919061250d565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561092157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b81526004016108ac9190613760565b60206040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc919061250d565b73ffffffffffffffffffffffffffffffffffffffff16318161091e9190613947565b90505b60008260036109309190613947565b600a61093c9190613a8b565b82856109489190613ba9565b6109529190613a07565b905060038573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d49190612857565b60ff166109e19190613c97565b600a6109ed9190613a8b565b816109f89190613a07565b905060038573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4257600080fd5b505afa158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190612857565b60ff16610a879190613c97565b600a610a939190613a8b565b82610a9e9190613a07565b915060405180606001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152508a8981518110610b0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508089602001818151610b279190613947565b91508181525050505050505050505b8080610b4190613e5f565b9150506103d4565b50610b6382600060018551610b5e9190613c97565b6119bb565b60005b8351811015610c7b576000838281518110610baa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015190506003821115610be0578083604001818151610bd39190613947565b9150818152505050610c68565b838281518110610c19577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183606001518360048110610c5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181905250505b8080610c7390613e5f565b915050610b66565b50809350505050919050565b6060610c92826118be565b8484604051602001610ca69392919061346f565b60405160208183030381529060405290509392505050565b6060610cd683600886901b601088901b171783611c75565b9050949350505050565b6060610ceb856118be565b610cf4856118be565b610cfd856118be565b84604051602001610d1194939291906135f0565b6040516020818303038152906040529050949350505050565b60606000806040518060a00160405280607b815260200161497f607b91399050610d526122ea565b60005b6004811015610e8257610e2e610d77878680610d7090613e5f565b97506117f4565b610d8d888780610d8690613e5f565b98506117f4565b610da3898880610d9c90613e5f565b99506117f4565b6000600286610db29190613ed6565b14610df2576040518060400160405280600381526020017f302e310000000000000000000000000000000000000000000000000000000000815250610e29565b6040518060400160405280600381526020017f302e3400000000000000000000000000000000000000000000000000000000008152505b610ce0565b828260048110610e67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052508080610e7a90613e5f565b915050610d55565b5081610f0c82600060048110610ec1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015183600160048110610f00577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516000610c87565b610f9483600260048110610f49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015184600360048110610f88577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516001610c87565b604051602001610fa6939291906132e1565b60405160208183030381529060405291506000610fc286610284565b90506000600a606460ff6103e8610fe58b8a80610fde90613e5f565b9b506117f4565b610fef9190613ba9565b610ff99190613a07565b6110039190613a07565b605061012c6110129190613c97565b61101c9190613ba9565b6110269190613a07565b60506110329190613947565b90506000600a606460ff6103e86110558c8b8061104e90613e5f565b9c506117f4565b61105f9190613ba9565b6110699190613a07565b6110739190613a07565b605061012c6110829190613c97565b61108c9190613ba9565b6110969190613a07565b60506110a29190613947565b9050818111156110b9576000829050819250809150505b600060086110d38a89806110cc90613e5f565b9a506117f4565b6110dd9190613ed6565b602d6110e99190613ba9565b9050600060086111058b8a806110fe90613e5f565b9b506117f4565b61110f9190613ed6565b602d61111b9190613ba9565b905060008060026111388d8c8061113190613e5f565b9d506117f4565b6111429190613ed6565b146111585761115385846000611758565b611165565b6111648584600061020d565b5b905060008060026111828e8d8061117b90613e5f565b9e506117f4565b61118c9190613ed6565b146111a25761119d85846001611758565b6111af565b6111ae8584600161020d565b5b90508882826040516020016111c693929190613124565b6040516020818303038152906040529850886111e18d6118be565b6040516020016111f2929190613355565b604051602081830303815290604052985060005b876060015150600481101561163a57600088606001518260048110611254577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015160000151905060008960600151836004811061129e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015160400151905060008a6060015184600481106112e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151602001519050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561133057505050611627565b60008390506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630af88b246040518163ffffffff1660e01b815260040160206040518083038186803b15801561139f57600080fd5b505afa1580156113b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d7919061250d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156114b457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357ba7046040518163ffffffff1660e01b815260040160006040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114af91906125a0565b611538565b8173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156114fa57600080fd5b505afa15801561150e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061153791906125a0565b5b90508e61155c87602d61154b9190613ba9565b60646115579190613947565b6118be565b8260405160200161156f9392919061323d565b6040516020818303038152906040529e508e6115a287602d6115919190613ba9565b606461159d9190613947565b6118be565b6115ae866103e7611f4a565b6040516020016115c093929190613155565b6040516020818303038152906040529e508e6115f387602d6115e29190613ba9565b60726115ee9190613947565b6118be565b6115fe856003611f4a565b6040516020016116109392919061328f565b6040516020818303038152906040529e5050505050505b808061163290613e5f565b915050611206565b508860405160200161164c91906131e1565b60405160208183030381529060405298508861166e88604001516103e7611f4a565b60405160200161167f9291906131a7565b6040516020818303038152906040529850886116a188602001516103e7611f4a565b6040516020016116b2929190613203565b6040516020818303038152906040529850886040516020016116d49190613333565b604051602081830303815290604052985060006117216116f38e6118be565b6116fc8c6120c7565b60405160200161170d9291906134cc565b6040516020818303038152906040526120c7565b9050806040516020016117349190613511565b6040516020818303038152906040529950899b505050505050505050505050919050565b6060600061177e60028661012c61176f9190613c97565b6117799190613a07565b6118be565b90506000611799600261012c6117949190613a07565b6118be565b90506117a4846118be565b82836117af896118be565b6117b88a6118be565b6117c18a6118be565b86876040516020016117da98979695949392919061338f565b604051602081830303815290604052925050509392505050565b600060208210611839576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183090613724565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460405160200161186f9291906130f8565b60405160208183030381529060405280519060200120905060006008846118969190613ba9565b60ff901b60001b90506008846118ac9190613ba9565b818316901c60001c9250505092915050565b60606000821415611906576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119b6565b604e67ffffffffffffffff811115611947577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119795781602001600182028036833780820191505090505b5090506000604e90505b600083146119a957600a83066030018082840152600182039150600a8404935050611983565b808201915080604e038252505b919050565b60008290506000829050808214156119d4575050611c70565b600085600286866119e59190613c03565b6119ef919061399d565b866119fa91906138b3565b81518110611a31577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190505b818313611c44575b8060400151868481518110611a82577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604001511115611aa7578280611a9f90613e16565b935050611a44565b5b858281518110611ae1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015181604001511115611b0b578180611b0390613d72565b925050611aa8565b818313611c3f576000868381518110611b4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050868481518110611b90577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151878481518110611bd1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080878581518110611c16577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508380611c2c90613e16565b9450508280611c3a90613d72565b935050505b611a3c565b81851215611c5857611c578686846119bb565b5b83831215611c6c57611c6b8684866119bb565b5b5050505b505050565b606062ffffff831115611cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb490613704565b60405180910390fd5b60ff821115611d01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf8906136e4565b60405180910390fd5b81600884901b1792506000600b67ffffffffffffffff811115611d4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d7f5781602001600182028036833780820191505090505b5090507f230000000000000000000000000000000000000000000000000000000000000081600081518110611ddd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600990505b6001811115611efc577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611e78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611eb5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611ef590613dbb565b9050611e13565b5060008414611f40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f37906136c4565b60405180910390fd5b8091505092915050565b60606000831415611f92576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120c1565b604e67ffffffffffffffff811115611fd3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120055781602001600182028036833780820191505090505b5090506000604e905060005b600085146120b357600a85066030018083850152600183039250600a860495506001820191505060006003826120479190613ed6565b148015612055575060008514155b80156120615750838114155b1561207957602c8083850152600183039250506120ae565b838114156120ad57602e80838501526001830392505060008514156120ac57600a85066030018083850152600183039250505b5b5b612011565b818301925081604e03835250505b92915050565b606060008251905060008114156120f05760405180602001604052806000815250915050612280565b600060036002836121019190613947565b61210b9190613a07565b60046121179190613ba9565b905060006020826121289190613947565b67ffffffffffffffff811115612167577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121995781602001600182028036833780820191505090505b509050600060405180606001604052806040815260200161493f604091399050600181016020830160005b8681101561223d5760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b905080845260048401935050506121c4565b506003860660018114612257576002811461226757612272565b613d3d60f01b6002830352612272565b603d60f81b60018303525b508484525050819450505050505b919050565b60405180608001604052806000815260200160008152602001600081526020016122ad612311565b81525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60405180608001604052806004905b60608152602001906001900390816122f95790505090565b60405180608001604052806004905b6123286122b3565b8152602001906001900390816123205790505090565b600061235161234c846137c9565b6137a4565b9050808382526020820190508285602086028201111561237057600080fd5b60005b858110156123a057816123868882612426565b845260208401935060208301925050600181019050612373565b5050509392505050565b60006123bd6123b8846137f5565b6137a4565b9050828152602081018484840111156123d557600080fd5b6123e0848285613d30565b509392505050565b60006123fb6123f6846137f5565b6137a4565b90508281526020810184848401111561241357600080fd5b61241e848285613d3f565b509392505050565b600081519050612435816148e2565b92915050565b600082601f83011261244c57600080fd5b815161245c84826020860161233e565b91505092915050565b600081519050612474816148f9565b92915050565b600082601f83011261248b57600080fd5b813561249b8482602086016123aa565b91505092915050565b600082601f8301126124b557600080fd5b81516124c58482602086016123e8565b91505092915050565b6000813590506124dd81614910565b92915050565b6000815190506124f281614910565b92915050565b60008151905061250781614927565b92915050565b60006020828403121561251f57600080fd5b600061252d84828501612426565b91505092915050565b60006020828403121561254857600080fd5b600082015167ffffffffffffffff81111561256257600080fd5b61256e8482850161243b565b91505092915050565b60006020828403121561258957600080fd5b600061259784828501612465565b91505092915050565b6000602082840312156125b257600080fd5b600082015167ffffffffffffffff8111156125cc57600080fd5b6125d8848285016124a4565b91505092915050565b6000806000606084860312156125f657600080fd5b600084013567ffffffffffffffff81111561261057600080fd5b61261c8682870161247a565b935050602084013567ffffffffffffffff81111561263957600080fd5b6126458682870161247a565b9250506040612656868287016124ce565b9150509250925092565b60006020828403121561267257600080fd5b6000612680848285016124ce565b91505092915050565b60006020828403121561269b57600080fd5b60006126a9848285016124e3565b91505092915050565b600080604083850312156126c557600080fd5b60006126d3858286016124ce565b92505060206126e4858286016124ce565b9150509250929050565b6000806040838503121561270157600080fd5b600061270f858286016124e3565b9250506020612720858286016124e3565b9150509250929050565b60008060006060848603121561273f57600080fd5b600061274d868287016124ce565b935050602061275e868287016124ce565b925050604061276f868287016124ce565b9150509250925092565b6000806000806080858703121561278f57600080fd5b600061279d878288016124ce565b94505060206127ae878288016124ce565b93505060406127bf878288016124ce565b925050606085013567ffffffffffffffff8111156127dc57600080fd5b6127e88782880161247a565b91505092959194509250565b6000806000806080858703121561280a57600080fd5b6000612818878288016124ce565b9450506020612829878288016124ce565b935050604061283a878288016124ce565b925050606061284b878288016124ce565b91505092959194509250565b60006020828403121561286957600080fd5b6000612877848285016124f8565b91505092915050565b600061288c83836128b0565b60208301905092915050565b60006128a4838361302b565b60608301905092915050565b6128b981613ccb565b82525050565b6128c881613ccb565b82525050565b6128df6128da82613ccb565b613ea8565b82525050565b60006128f082613840565b6128fa818561387b565b935061290583613826565b8060005b8381101561293657815161291d8882612880565b975061292883613861565b925050600181019050612909565b5085935050505092915050565b61294c8161384b565b612956818461388c565b925061296182613836565b8060005b838110156129925781516129798782612898565b96506129848361386e565b925050600181019050612965565b505050505050565b60006129a582613856565b6129af8185613897565b93506129bf818560208601613d3f565b6129c881613f94565b840191505092915050565b60006129de82613856565b6129e881856138a8565b93506129f8818560208601613d3f565b80840191505092915050565b6000612a11602083613897565b9150612a1c82613fbf565b602082019050919050565b6000612a346006836138a8565b9150612a3f82613fe8565b600682019050919050565b6000612a5760a9836138a8565b9150612a6282614011565b60a982019050919050565b6000612a7a6005836138a8565b9150612a85826140f8565b600582019050919050565b6000612a9d6011836138a8565b9150612aa882614121565b601182019050919050565b6000612ac06008836138a8565b9150612acb8261414a565b600882019050919050565b6000612ae36023836138a8565b9150612aee82614173565b602382019050919050565b6000612b066024836138a8565b9150612b11826141c2565b602482019050919050565b6000612b296016836138a8565b9150612b3482614211565b601682019050919050565b6000612b4c600a836138a8565b9150612b578261423a565b600a82019050919050565b6000612b6f601983613897565b9150612b7a82614263565b602082019050919050565b6000612b926031836138a8565b9150612b9d8261428c565b603182019050919050565b6000612bb56019836138a8565b9150612bc0826142db565b601982019050919050565b6000612bd8602e836138a8565b9150612be382614304565b602e82019050919050565b6000612bfb6001836138a8565b9150612c0682614353565b600182019050919050565b6000612c1e6010836138a8565b9150612c298261437c565b601082019050919050565b6000612c416014836138a8565b9150612c4c826143a5565b601482019050919050565b6000612c646001836138a8565b9150612c6f826143ce565b600182019050919050565b6000612c876001836138a8565b9150612c92826143f7565b600182019050919050565b6000612caa6004836138a8565b9150612cb582614420565b600482019050919050565b6000612ccd600f836138a8565b9150612cd882614449565b600f82019050919050565b6000612cf0601b836138a8565b9150612cfb82614472565b601b82019050919050565b6000612d136002836138a8565b9150612d1e8261449b565b600282019050919050565b6000612d366007836138a8565b9150612d41826144c4565b600782019050919050565b6000612d596005836138a8565b9150612d64826144ed565b600582019050919050565b6000612d7c6007836138a8565b9150612d8782614516565b600782019050919050565b6000612d9f6022836138a8565b9150612daa8261453f565b602282019050919050565b6000612dc26014836138a8565b9150612dcd8261458e565b601482019050919050565b6000612de5601b83613897565b9150612df0826145b7565b602082019050919050565b6000612e086010836138a8565b9150612e13826145e0565b601082019050919050565b6000612e2b6015836138a8565b9150612e3682614609565b601582019050919050565b6000612e4e6006836138a8565b9150612e5982614632565b600682019050919050565b6000612e716002836138a8565b9150612e7c8261465b565b600282019050919050565b6000612e94601d836138a8565b9150612e9f82614684565b601d82019050919050565b6000612eb7601483613897565b9150612ec2826146ad565b602082019050919050565b6000612eda6005836138a8565b9150612ee5826146d6565b600582019050919050565b6000612efd6013836138a8565b9150612f08826146ff565b601382019050919050565b6000612f206000836138a8565b9150612f2b82614728565b600082019050919050565b6000612f436006836138a8565b9150612f4e8261472b565b600682019050919050565b6000612f666006836138a8565b9150612f7182614754565b600682019050919050565b6000612f896028836138a8565b9150612f948261477d565b602882019050919050565b6000612fac6018836138a8565b9150612fb7826147cc565b601882019050919050565b6000612fcf6005836138a8565b9150612fda826147f5565b600582019050919050565b6000612ff26072836138a8565b9150612ffd8261481e565b607282019050919050565b60006130156015836138a8565b9150613020826148b9565b601582019050919050565b60608201600082015161304160008501826128b0565b50602082015161305460208501826130c3565b50604082015161306760408501826130c3565b50505050565b6101e08201600082015161308460008501826130c3565b50602082015161309760208501826130c3565b5060408201516130aa60408501826130c3565b5060608201516130bd6060850182612943565b50505050565b6130cc81613d19565b82525050565b6130db81613d19565b82525050565b6130f26130ed82613d19565b613ecc565b82525050565b600061310482856128ce565b60148201915061311482846130e1565b6020820191508190509392505050565b600061313082866129d3565b915061313c82856129d3565b915061314882846129d3565b9150819050949350505050565b600061316182866129d3565b915061316c82612a90565b915061317882856129d3565b915061318382612c11565b915061318f82846129d3565b915061319a82612d29565b9150819050949350505050565b60006131b382856129d3565b91506131be82612af9565b91506131ca82846129d3565b91506131d582612d29565b91508190509392505050565b60006131ed82846129d3565b91506131f882612bcb565b915081905092915050565b600061320f82856129d3565b915061321a82612d92565b915061322682846129d3565b915061323182612d29565b91508190509392505050565b600061324982866129d3565b915061325482612dfb565b915061326082856129d3565b915061326b82612cc0565b915061327782846129d3565b915061328282612d29565b9150819050949350505050565b600061329b82866129d3565b91506132a682612dfb565b91506132b282856129d3565b91506132bd82612ef0565b91506132c982846129d3565b91506132d482612d29565b9150819050949350505050565b60006132ed82866129d3565b91506132f882612f36565b915061330482856129d3565b915061331082846129d3565b915061331b82612a4a565b915061332682612b85565b9150819050949350505050565b600061333f82846129d3565b915061334a82612f59565b915081905092915050565b600061336182856129d3565b915061336c82612f7c565b915061337882846129d3565b915061338382612d29565b91508190509392505050565b600061339a82612b1c565b91506133a6828b6129d3565b91506133b182612e41565b91506133bd828a6129d3565b91506133c882612ecd565b91506133d482896129d3565b91506133df82612c7a565b91506133ea82612ab3565b91506133f682886129d3565b915061340182612b3f565b915061340d82876129d3565b915061341882612db5565b915061342482866129d3565b915061342f82612c57565b915061343b82856129d3565b915061344682612c57565b915061345282846129d3565b915061345d82612a6d565b91508190509998505050505050505050565b600061347a82612ba8565b915061348682866129d3565b915061349182613008565b915061349d82856129d3565b91506134a882612ad6565b91506134b482846129d3565b91506134bf82612c34565b9150819050949350505050565b60006134d782612ce3565b91506134e382856129d3565b91506134ee82612fe5565b91506134fa82846129d3565b915061350582612d06565b91508190509392505050565b600061351c82612e87565b915061352882846129d3565b915081905092915050565b600061353e82612f9f565b915061354a828a6129d3565b915061355582612e1e565b915061356182896129d3565b915061356c82612f13565b915061357882886129d3565b915061358382612c57565b915061358f82876129d3565b915061359a82612d6f565b91506135a682866129d3565b91506135b182612a27565b91506135bd82856129d3565b91506135c882612d4c565b91506135d482846129d3565b91506135df82612c9d565b915081905098975050505050505050565b60006135fb82612fc2565b915061360782876129d3565b915061361282612e64565b915061361e82866129d3565b915061362982612e64565b915061363582856129d3565b915061364082612e64565b915061364c82846129d3565b915061365782612bee565b915081905095945050505050565b600060208201905061367a60008301846128bf565b92915050565b6000602082019050818103600083015261369a81846128e5565b905092915050565b600060208201905081810360008301526136bc818461299a565b905092915050565b600060208201905081810360008301526136dd81612a04565b9050919050565b600060208201905081810360008301526136fd81612b62565b9050919050565b6000602082019050818103600083015261371d81612dd8565b9050919050565b6000602082019050818103600083015261373d81612eaa565b9050919050565b60006101e08201905061375a600083018461306d565b92915050565b600060208201905061377560008301846130d2565b92915050565b600060408201905061379060008301856130d2565b61379d60208301846128bf565b9392505050565b60006137ae6137bf565b90506137ba8282613de5565b919050565b6000604051905090565b600067ffffffffffffffff8211156137e4576137e3613f65565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156138105761380f613f65565b5b61381982613f94565b9050602081019050919050565b6000819050602082019050919050565b6000819050919050565b600081519050919050565b600060049050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006138be82613cef565b91506138c983613cef565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561390457613903613f07565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561393c5761393b613f07565b5b828201905092915050565b600061395282613d19565b915061395d83613d19565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561399257613991613f07565b5b828201905092915050565b60006139a882613cef565b91506139b383613cef565b9250826139c3576139c2613f36565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156139fc576139fb613f07565b5b828205905092915050565b6000613a1282613d19565b9150613a1d83613d19565b925082613a2d57613a2c613f36565b5b828204905092915050565b6000808291508390505b6001851115613a8257808604811115613a5e57613a5d613f07565b5b6001851615613a6d5780820291505b8081029050613a7b85613fb2565b9450613a42565b94509492505050565b6000613a9682613d19565b9150613aa183613d19565b9250613ace7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613ad6565b905092915050565b600082613ae65760019050613ba2565b81613af45760009050613ba2565b8160018114613b0a5760028114613b1457613b43565b6001915050613ba2565b60ff841115613b2657613b25613f07565b5b8360020a915084821115613b3d57613b3c613f07565b5b50613ba2565b5060208310610133831016604e8410600b8410161715613b785782820a905083811115613b7357613b72613f07565b5b613ba2565b613b858484846001613a38565b92509050818404811115613b9c57613b9b613f07565b5b81810290505b9392505050565b6000613bb482613d19565b9150613bbf83613d19565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613bf857613bf7613f07565b5b828202905092915050565b6000613c0e82613cef565b9150613c1983613cef565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615613c5457613c53613f07565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615613c8c57613c8b613f07565b5b828203905092915050565b6000613ca282613d19565b9150613cad83613d19565b925082821015613cc057613cbf613f07565b5b828203905092915050565b6000613cd682613cf9565b9050919050565b6000613ce882613ccb565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613d5d578082015181840152602081019050613d42565b83811115613d6c576000848401525b50505050565b6000613d7d82613cef565b91507f8000000000000000000000000000000000000000000000000000000000000000821415613db057613daf613f07565b5b600182039050919050565b6000613dc682613d19565b91506000821415613dda57613dd9613f07565b5b600182039050919050565b613dee82613f94565b810181811067ffffffffffffffff82111715613e0d57613e0c613f65565b5b80604052505050565b6000613e2182613cef565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e5457613e53613f07565b5b600182019050919050565b6000613e6a82613d19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e9d57613e9c613f07565b5b600182019050919050565b6000613eb382613eba565b9050919050565b6000613ec582613fa5565b9050919050565b6000819050919050565b6000613ee182613d19565b9150613eec83613d19565b925082613efc57613efb613f36565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f222063793d220000000000000000000000000000000000000000000000000000600082015250565b7f3c7374796c653e2e62617365207b20666f6e743a20626f6c642033307078207360008201527f616e732d73657269663b2066696c6c3a2077686974657d2e6974656d207b206660208201527f6f6e743a206e6f726d616c20323470782073616e732d73657269663b2066696c60408201527f6c3a2077686974657d2e737562207b20666f6e743a206e6f726d616c2031347060608201527f782073616e732d73657269663b2066696c6c3a2077686974657d3c2f7374796c60808201527f653e3c2f646566733e000000000000000000000000000000000000000000000060a082015250565b7f2922202f3e000000000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d223135302220793d22000000000000000000000000000000600082015250565b7f2077696474683d22000000000000000000000000000000000000000000000000600082015250565b7f222f3e203c73746f70206f66667365743d22302e35222073746f702d636f6c6f60008201527f723d220000000000000000000000000000000000000000000000000000000000602082015250565b7f3c7465787420783d223135302220793d223238302220636c6173733d2269746560008201527f6d223e2400000000000000000000000000000000000000000000000000000000602082015250565b7f3c726563742066696c6c3d2275726c28237061696e7400000000000000000000600082015250565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b7f4f7061636974792067726561746572207468616e203078666600000000000000600082015250565b7f3c726563742077696474683d223130302522206865696768743d22313030252260008201527f2066696c6c3d2223323732373237222f3e000000000000000000000000000000602082015250565b7f3c6c696e6561724772616469656e742069643d227061696e7400000000000000600082015250565b7f3c7465787420783d2232302220793d223238302220636c6173733d226974656d60008201527f223e4f746865723c2f746578743e000000000000000000000000000000000000602082015250565b7f2900000000000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226974656d223e2400000000000000000000000000000000600082015250565b7f222f3e3c2f6c696e6561724772616469656e743e000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b7f22202f3e00000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226974656d223e0000000000000000000000000000000000600082015250565b7f7b226e616d65223a202242616c616e6365205761746368657220230000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f746578743e00000000000000000000000000000000000000000000000000600082015250565b7f2220723d22000000000000000000000000000000000000000000000000000000600082015250565b7f29222063783d2200000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d2232302220793d2235382220636c6173733d22626173652260008201527f3e24000000000000000000000000000000000000000000000000000000000000602082015250565b7f22207472616e73666f726d3d22726f7461746528000000000000000000000000600082015250565b7f56616c75652067726561746572207468616e2030786666666666660000000000600082015250565b7f3c7465787420783d2232302220793d2200000000000000000000000000000000600082015250565b7f2922207472616e73666f726d3d22726f74617465280000000000000000000000600082015250565b7f292220783d220000000000000000000000000000000000000000000000000000600082015250565b7f2c20000000000000000000000000000000000000000000000000000000000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4f6666736574206f7574206f6620626f756e6473000000000000000000000000600082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226261736520737562223e00000000000000000000000000600082015250565b50565b7f3c646566733e0000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d2232302220793d2233302220636c6173733d22737562223e60008201527f57616c6c65742023000000000000000000000000000000000000000000000000602082015250565b7f3c636972636c652066696c6c3d2275726c28237061696e740000000000000000600082015250565b7f7267626128000000000000000000000000000000000000000000000000000000600082015250565b7f222c20226465736372697074696f6e223a202254686973204e4654206469737060008201527f6c61797320697473206f776e6572732062616c616e636573206f66207472616360208201527f6b656420746f6b656e732e222c2022696d616765223a2022646174613a696d6160408201527f67652f7376672b786d6c3b6261736536342c0000000000000000000000000000606082015250565b7f223e203c73746f702073746f702d636f6c6f723d220000000000000000000000600082015250565b6148eb81613ccb565b81146148f657600080fd5b50565b61490281613cdd565b811461490d57600080fd5b50565b61491981613d19565b811461492457600080fd5b50565b61493081613d23565b811461493b57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222077696474683d2233303022206865696768743d22333030222076696577426f783d223020302033303020333030223ea2646970667358221220940afc345c7e4acb7d315bba1a63ea0cbcbb648af1639bacfe11ccc33a4ad4ea64736f6c63430008040033",
  "libraries": {
    "Base64": "0x9470D14e200066267c208a87005e224162C80386",
    "OStrings": "0xDf6449B885AFC8aCf734ffcef7d1869E9FA25aa0",
    "CustomSort": "0x553901Cd7Bb485Ecd625e0A3Dc5c70B40f58FE39"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2465,
        "contract": "contracts/PortfolioMetadata.sol:PortfolioMetadata",
        "label": "portfolioTrackerAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2468,
        "contract": "contracts/PortfolioMetadata.sol:PortfolioMetadata",
        "label": "portfolioTracker",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPortfolioNFT)4012"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPortfolioNFT)4012": {
        "encoding": "inplace",
        "label": "contract IPortfolioNFT",
        "numberOfBytes": "20"
      }
    }
  }
}