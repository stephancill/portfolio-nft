{
  "address": "0x834A227Ec86776292601D298DE4a767677950a55",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_portfolioTrackerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "diameter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rotate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "generateCircle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "startColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "endColor",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "generateGradient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "width",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rotate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "generateSquare",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPortfolioData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "otherValue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AddressBalanceValue[4]",
              "name": "topTokens",
              "type": "tuple[4]"
            }
          ],
          "internalType": "struct PortfolioData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "g",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "hexColorString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "randomUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "g",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "a",
          "type": "string"
        }
      ],
      "name": "rgbaColorString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72208ef6e3cccb3588508092dba44701ced43eafd478cae37acee35cd68a757a",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0x834A227Ec86776292601D298DE4a767677950a55",
    "transactionIndex": 10,
    "gasUsed": "4123472",
    "logsBloom": "0x
    "blockHash": "0xae383e714cdf01a41feab21dec1c22475197d83e29b839b0001cd3b13c25d268",
    "transactionHash": "0x72208ef6e3cccb3588508092dba44701ced43eafd478cae37acee35cd68a757a",
    "logs": [],
    "blockNumber": 11708522,
    "cumulativeGasUsed": "5565422",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x98317FEefA43084F7205E6d8eE338CbaCf4D9Fa9"
  ],
  "numDeployments": 1,
  "solcInputHash": "28e296f461fc5a840d77936ac2fe8dbc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_portfolioTrackerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"diameter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rotate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateCircle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"startColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endColor\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateGradient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rotate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateSquare\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPortfolioData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AddressBalanceValue[4]\",\"name\":\"topTokens\",\"type\":\"tuple[4]\"}],\"internalType\":\"struct PortfolioData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"g\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"hexColorString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"randomUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"g\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"}],\"name\":\"rgbaColorString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PortfolioMetadata.sol\":\"PortfolioMetadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/PortfolioMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\nimport \\\"./libraries/Base64.sol\\\";\\nimport \\\"./libraries/OStrings.sol\\\";\\nimport \\\"./libraries/CustomSort.sol\\\";\\n\\nimport \\\"./interfaces/IPortfolioNFT.sol\\\";\\nimport \\\"./interfaces/IPriceFetcher.sol\\\";\\n\\nimport \\\"./structs/PortfolioData.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IPortfolioMetadata {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\ncontract PortfolioMetadata is IPortfolioMetadata {\\n    uint256 constant DECIMALS = 3;\\n    uint256 constant WIDTH = 300;\\n\\n    address portfolioTrackerAddress;\\n    IPortfolioNFT portfolioTracker;\\n\\n    constructor(address _portfolioTrackerAddress) {\\n        portfolioTrackerAddress = _portfolioTrackerAddress;\\n        portfolioTracker = IPortfolioNFT(portfolioTrackerAddress);\\n    }\\n\\n    function getPortfolioData(uint256 tokenId) public view returns (PortfolioData memory) {\\n        address[] memory tokenAddresses = portfolioTracker.getTokenAddresses(tokenId);\\n        \\n        AddressBalanceValue[] memory valueByAddress = new AddressBalanceValue[](tokenAddresses.length);\\n        PortfolioData memory portfolioData;\\n\\n        portfolioData.tokenId = tokenId;\\n        \\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            address _tokenAddress = tokenAddresses[i];\\n            if (_tokenAddress == address(0)) {\\n                continue;\\n            } \\n            \\n            IERC20Metadata tokenContract = IERC20Metadata(_tokenAddress);\\n\\n            (uint256 price, uint256 priceDecimals) = portfolioTracker.priceFetcher().quote(portfolioTracker.baseTokenAddress(), _tokenAddress);\\n            uint256 balance = tokenContract.balanceOf(portfolioTracker.ownerOf(tokenId));\\n            if (_tokenAddress == portfolioTracker.WETHAddress()) { \\n                balance += portfolioTracker.ownerOf(tokenId).balance;\\n            }\\n            uint256 value = price * balance / (10 ** (DECIMALS+priceDecimals));\\n            value /= (10 ** (tokenContract.decimals()-DECIMALS));\\n            balance /= (10 ** (tokenContract.decimals()-DECIMALS));\\n\\n            valueByAddress[i] = AddressBalanceValue(_tokenAddress, balance, value);\\n\\n            portfolioData.totalValue += value;\\n        }\\n\\n        CustomSort.sortByValue(valueByAddress, 0, int(valueByAddress.length - 1));\\n\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            uint256 value = valueByAddress[i].value;\\n            if (i > 3) {\\n                portfolioData.otherValue += value;\\n                continue;\\n            } \\n\\n            portfolioData.topTokens[i] = valueByAddress[i];\\n        }\\n\\n        return portfolioData;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public override view returns (string memory) {\\n        uint256 entropyOffset = 0;\\n        \\n        string memory output = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 300 300\\\">';\\n        \\n        string[4] memory colors;\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            colors[i] = rgbaColorString(\\n                randomUint(tokenId, entropyOffset++), \\n                randomUint(tokenId, entropyOffset++), \\n                randomUint(tokenId, entropyOffset++),\\n                i%2 == 0 ? \\\"0.4\\\" : \\\"0.1\\\"\\n            );\\n        }\\n\\n        output = string(abi.encodePacked(\\n            output, '<defs>', \\n            generateGradient(colors[0], colors[1], 0), \\n            generateGradient(colors[2], colors[3], 1),\\n            '<style>.base { font: bold 30px sans-serif; fill: white}.item { font: normal 24px sans-serif; fill: white}.sub { font: normal 14px sans-serif; fill: white}</style></defs>',\\n            '<rect width=\\\"300\\\" height=\\\"300\\\" fill=\\\"#272727\\\"/>'\\n        ));\\n        \\n        PortfolioData memory portfolioData = getPortfolioData(tokenId);\\n\\n        uint256 width1 = 80 + ((WIDTH - 80) * ((randomUint(tokenId, entropyOffset++) * 1000 / uint256(255) / 100))) / 10; // Range 80-300\\n        uint256 width2 = 80 + ((WIDTH - 80) * ((randomUint(tokenId, entropyOffset++) * 1000 / uint256(255) / 100))) / 10; // Range 80-300\\n\\n        if (width2 > width1) {\\n            uint256 tmp = width1;\\n            width1 = width2;\\n            width2 = tmp;\\n        }\\n\\n        uint256 rotation1 = (45 * (randomUint(tokenId, entropyOffset++) % 8));\\n        uint256 rotation2 = (45 * (randomUint(tokenId, entropyOffset++) % 8));\\n\\n        string memory shapeBack = randomUint(tokenId, entropyOffset++) % 2 == 0 ? generateCircle(width1, rotation1, 0) : generateSquare(width1, rotation1, 0);\\n        string memory shapeFront = randomUint(tokenId, entropyOffset++) % 2 == 0 ? generateCircle(width2, rotation2, 1) : generateSquare(width2, rotation2, 1);\\n\\n        output = string(abi.encodePacked(output, shapeBack, shapeFront));\\n\\n        output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"30\\\" class=\\\"sub\\\">Wallet #', OStrings.toString(tokenId), '</text>'));\\n\\n        for (uint256 i = 0; i < portfolioData.topTokens.length; i++) {\\n            \\n            address tokenAddress = portfolioData.topTokens[i].addr;\\n            uint256 value = portfolioData.topTokens[i].value;\\n            uint256 balance = portfolioData.topTokens[i].balance;\\n\\n            if (tokenAddress == address(0)) {\\n                continue;\\n            }\\n\\n            IERC20Metadata tokenContract = IERC20Metadata(tokenAddress);\\n\\n            string memory symbol = tokenAddress != portfolioTracker.WETHAddress() ? tokenContract.symbol() : portfolioTracker.WETHSymbol();\\n\\n            output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"', OStrings.toString(100+45*i), '\\\" class=\\\"item\\\">', symbol, '</text>'));\\n            output = string(abi.encodePacked(output, '<text x=\\\"150\\\" y=\\\"', OStrings.toString(100+45*i), '\\\" class=\\\"item\\\">$', OStrings.toStringCommaFormatWithDecimals(value, 999), '</text>'));\\n            output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"', OStrings.toString(100+14+45*i), '\\\" class=\\\"base sub\\\">', OStrings.toStringCommaFormatWithDecimals(balance, DECIMALS), '</text>'));\\n        }\\n\\n        // Other value\\n        output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"280\\\" class=\\\"item\\\">Other</text>'));\\n        output = string(abi.encodePacked(output, '<text x=\\\"150\\\" y=\\\"280\\\" class=\\\"item\\\">$', OStrings.toStringCommaFormatWithDecimals(portfolioData.otherValue, 999), '</text>'));\\n        \\n        // Total value\\n        output = string(abi.encodePacked(output, '<text x=\\\"20\\\" y=\\\"58\\\" class=\\\"base\\\">$', OStrings.toStringCommaFormatWithDecimals(portfolioData.totalValue, 999), '</text>'));\\n\\n        output = string(abi.encodePacked(output, '</svg>'));\\n        \\n        // JSON\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Balance Watcher #', OStrings.toString(tokenId), '\\\", \\\"description\\\": \\\"This NFT displays its owners balances of tracked tokens.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n\\n    function randomUint(uint256 seed, uint256 offset) public view returns (uint256) {\\n        require(offset < 32, \\\"Offset out of bounds\\\");\\n        bytes32 entropy = keccak256(abi.encodePacked(portfolioTrackerAddress, seed));\\n        bytes32 mask = bytes32(0xff << (offset * 8));\\n        return uint256((entropy & mask) >> (offset * 8));\\n    }\\n\\n    function generateCircle(uint256 diameter, uint256 rotate, uint256 index) public pure returns (string memory) {\\n        string memory center = OStrings.toString(WIDTH/2);\\n        return string(abi.encodePacked(\\n            '<circle fill=\\\"url(#paint', OStrings.toString(index), ')\\\" transform=\\\"rotate(', \\n            OStrings.toString(rotate), '', center, ' ', center, ')\\\" cx=\\\"', center, '\\\" cy=\\\"', center, '\\\" r=\\\"', \\n            OStrings.toString(diameter/2), '\\\" />'));\\n    }\\n\\n    function generateSquare(uint256 width, uint256 rotate, uint256 index) public pure returns (string memory) {\\n        string memory origin = OStrings.toString((WIDTH-width)/2);\\n        string memory center = OStrings.toString(WIDTH/2);\\n        return string(abi.encodePacked(\\n            '<rect fill=\\\"url(#paint', OStrings.toString(index), ')\\\" x=\\\"', origin, '\\\" y=\\\"', origin, '\\\"', \\n            ' width=\\\"', OStrings.toString(width), '\\\" height=\\\"', OStrings.toString(width), '\\\" transform=\\\"rotate(', \\n            OStrings.toString(rotate), ' ', center, ' ', center, ')\\\" />'));\\n    }\\n\\n    function hexColorString(uint256 r, uint256 g, uint256 b, uint256 a) public pure returns (string memory) {\\n        return OStrings.toHexColorString((r << 16) | (g << 8) | b, a);\\n    }\\n\\n    function rgbaColorString(uint256 r, uint256 g, uint256 b, string memory a) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            'rgba(', \\n            OStrings.toString(r), ', ', \\n            OStrings.toString(g), ', ', \\n            OStrings.toString(b), ', ', \\n            a,\\n            ')'\\n        ));\\n    }\\n\\n    function generateGradient(string memory startColor, string memory endColor, uint256 index) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '<linearGradient id=\\\"paint', OStrings.toString(index), '\\\"> <stop stop-color=\\\"', startColor, '\\\"/> <stop offset=\\\"0.5\\\" stop-color=\\\"',\\n            endColor, '\\\"/></linearGradient>'));\\n\\n    }\\n}\",\"keccak256\":\"0xd39bec58b05e5429244741cfc9c5b7655e06eadf2861dcddb3e0e1031c8ae927\",\"license\":\"MIT\"},\"contracts/interfaces/IPortfolioNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"./IPriceFetcher.sol\\\";\\n\\ninterface IPortfolioNFT is IERC721 {\\n    function priceFetcher() external view returns (IPriceFetcher);\\n    function baseTokenAddress() external view returns (address);\\n    function tokenAddresses() external view returns (address);\\n    function WETHAddress() external view returns (address);\\n    function WETHSymbol() external view returns (string memory);\\n    function getTokenAddresses(uint256 tokenId) external view returns (address[] memory);\\n}\",\"keccak256\":\"0x233988ae59ed3a44083aaffa5cdc5ea412e502ca0322256829c0754f278cbef2\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFetcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFetcher {\\n    function quote(address _baseTokenAddress, address _tokenAddress) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0xbd5c2c11200ef90a9099213808e69c70992c9b43ac29ea7e3eee0f050054ac04\",\"license\":\"MIT\"},\"contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\",\"keccak256\":\"0x7b82b53675414e1ce88750b376660e21943bdddbb1f5b46bf98703e105ac0c9d\",\"license\":\"MIT\"},\"contracts/libraries/CustomSort.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.5.15;\\n\\nimport \\\"./../structs/PortfolioData.sol\\\";\\n\\n/**\\n * @title Quicksort library in Solidity\\n * @author Subhod I (https://gist.github.com/subhodi/b3b86cc13ad2636420963e692a4d896f)\\n */\\nlibrary CustomSort {\\n    function sort(uint256[] memory arr, int left, int right) internal view {\\n        int i = left;\\n        int j = right;\\n        if(i==j) return;\\n        uint256 pivot = arr[uint(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint(i)] > pivot) i++;\\n            while (pivot > arr[uint(j)]) j--;\\n            if (i <= j) {\\n                uint tmp = arr[uint(j)];\\n                arr[uint(j)] = arr[uint(i)];\\n                arr[uint(i)] = tmp;\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j)\\n            sort(arr, left, j);\\n        if (i < right)\\n            sort(arr, i, right);\\n    }\\n \\n\\n    function sortByValue(AddressBalanceValue[] memory arr, int left, int right) internal view {\\n        int i = left;\\n        int j = right;\\n        if(i==j) return;\\n        AddressBalanceValue memory pivot = arr[uint(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint(i)].value > pivot.value) i++;\\n            while (pivot.value > arr[uint(j)].value) j--;\\n            if (i <= j) {\\n                AddressBalanceValue memory tmp = arr[uint(j)];\\n                arr[uint(j)] = arr[uint(i)];\\n                arr[uint(i)] = tmp;\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j)\\n            sortByValue(arr, left, j);\\n        if (i < right)\\n            sortByValue(arr, i, right);\\n    }\\n}\",\"keccak256\":\"0x4560b71496ff53e4f40df1ce65d7bb38e026f8c84e4213854670be198672ce2f\",\"license\":\"Unlicense\"},\"contracts/libraries/OStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary OStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint256 private constant MAX_UINT256_STRING_LENGTH = 78;\\n    uint8 private constant ASCII_DIGIT_OFFSET = 48;\\n\\n    /// @dev Converts a `uint256` value to a string.\\n    /// @param n The integer to convert.\\n    /// @return nstr `n` as a decimal string.\\n    /// Source: https://github.com/mzhu25/sol2string\\n    function toString(uint256 n) \\n        internal \\n        pure \\n        returns (string memory nstr) \\n    {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        }\\n        // Overallocate memory\\n        nstr = new string(MAX_UINT256_STRING_LENGTH);\\n        uint256 k = MAX_UINT256_STRING_LENGTH;\\n        // Populate string from right to left (lsb to msb).\\n        while (n != 0) {\\n            assembly {\\n                let char := add(\\n                    ASCII_DIGIT_OFFSET,\\n                    mod(n, 10)\\n                )\\n                mstore(add(nstr, k), char)\\n                k := sub(k, 1)\\n                n := div(n, 10)\\n            }\\n        }\\n        assembly {\\n            // Shift pointer over to actual start of string.\\n            nstr := add(nstr, k)\\n            // Store actual string length.\\n            mstore(nstr, sub(MAX_UINT256_STRING_LENGTH, k))\\n        }\\n        return nstr;\\n    }\\n\\n    function toStringCommaFormatWithDecimals(uint256 n, uint256 d) \\n        internal \\n        pure \\n        returns (string memory nstr) \\n    {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        }\\n        // Overallocate memory\\n        nstr = new string(MAX_UINT256_STRING_LENGTH);\\n        uint256 k = MAX_UINT256_STRING_LENGTH;\\n        uint256 count = 0;\\n        // Populate string from right to left (lsb to msb).\\n        while (n != 0) {\\n            assembly {\\n                let char := add(\\n                    ASCII_DIGIT_OFFSET,\\n                    mod(n, 10)\\n                )\\n                mstore(add(nstr, k), char)\\n                k := sub(k, 1)\\n                n := div(n, 10)\\n                count := add(count, 1)\\n            }\\n\\n            if (count % 3 == 0 && n != 0 && count != d) {\\n                assembly {\\n                    let char := 44 // ,\\n                    mstore(add(nstr, k), char)\\n                    k := sub(k, 1)\\n                }\\n            } else \\n            if (count == d) {\\n                assembly {\\n                    let char := 46 // .\\n                    mstore(add(nstr, k), char)\\n                    k := sub(k, 1)\\n                }\\n                if (n == 0) {\\n                    assembly {\\n                        let char := add(\\n                            ASCII_DIGIT_OFFSET,\\n                            mod(n, 10)\\n                        )\\n                        mstore(add(nstr, k), char)\\n                        k := sub(k, 1)\\n                    }\\n                }\\n            }\\n        }\\n        assembly {\\n            // Shift pointer over to actual start of string.\\n            nstr := add(nstr, k)\\n            // Store actual string length.\\n            mstore(nstr, sub(MAX_UINT256_STRING_LENGTH, k))\\n        }\\n        return nstr;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an int to \\n     */\\n    function toHexColorString(uint256 value, uint256 opacity) internal pure returns (string memory) {\\n        require(value <= 0xffffff, \\\"Value greater than 0xffffff\\\");\\n        require(opacity <= 0xff, \\\"Opacity greater than 0xff\\\");\\n        value = value << 8 | opacity;\\n        bytes memory buffer = new bytes(11);\\n        buffer[0] = \\\"#\\\";\\n        for (uint256 i = 9; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\",\"keccak256\":\"0x0c7223ee1b2257fe15cceeee76cc36080d4041c42919ee68afd94c4d6c2b3604\",\"license\":\"MIT\"},\"contracts/structs/AddressBalanceValue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct AddressBalanceValue {\\n    address addr;\\n    uint256 balance;\\n    uint256 value;\\n}\",\"keccak256\":\"0x46f844157eb59a9598eeadb0c8f78e3e570dccccf82590584b86a33fae492261\",\"license\":\"MIT\"},\"contracts/structs/PortfolioData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressBalanceValue.sol\\\";\\n\\nstruct PortfolioData {\\n    uint256 tokenId;\\n    uint256 totalValue;\\n    uint256 otherValue;\\n    AddressBalanceValue[4] topTokens;\\n}\",\"keccak256\":\"0x4a408f676709628097e12a16f6e1cb83512cac407842c91b33bd726acd398ad6\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004aae38038062004aae8339818101604052810190620000379190620000f6565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000170565b600081519050620000f08162000156565b92915050565b6000602082840312156200010957600080fd5b60006200011984828501620000df565b91505092915050565b60006200012f8262000136565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001618162000122565b81146200016d57600080fd5b50565b61492e80620001806000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635e5ca9871161005b5780635e5ca9871461014d578063c87b56dd1461017d578063cce7065c146101ad578063d61b051b146101dd57610088565b80633c2c5cb61461008d57806343adc6be146100bd5780634bdcdcf3146100ed578063539cf0381461011d575b600080fd5b6100a760048036038101906100a29190612713565b61020d565b6040516100b4919061361c565b60405180910390f35b6100d760048036038101906100d29190612649565b610284565b6040516100e491906136be565b60405180910390f35b610107600480360381019061010291906125ca565b610c70565b604051610114919061361c565b60405180910390f35b610137600480360381019061013291906127dd565b610ca7565b604051610144919061361c565b60405180910390f35b61016760048036038101906101629190612762565b610cc9565b604051610174919061361c565b60405180910390f35b61019760048036038101906101929190612649565b610d13565b6040516101a4919061361c565b60405180910390f35b6101c760048036038101906101c29190612713565b611741565b6040516101d4919061361c565b60405180910390f35b6101f760048036038101906101f2919061269b565b6117dd565b60405161020491906136da565b60405180910390f35b60606000610228600261012c610223919061391f565b6118a7565b9050610233836118a7565b61023c856118a7565b8283848561025560028c610250919061391f565b6118a7565b60405160200161026b97969594939291906134a6565b6040516020818303038152906040529150509392505050565b61028c61226e565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c591a491846040518263ffffffff1660e01b81526004016102e991906136da565b60006040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061033e919061251f565b90506000815167ffffffffffffffff811115610383577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103bc57816020015b6103a961229c565b8152602001906001900390816103a15790505b5090506103c761226e565b8481600001818152505060005b8351811015610b32576000848281518110610418577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561045d5750610b1f565b6000819050600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632421d7266040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cd57600080fd5b505afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190612560565b73ffffffffffffffffffffffffffffffffffffffff16634a5aa711600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cb374bd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c091906124f6565b866040518363ffffffff1660e01b81526004016105de9291906135f3565b604080518083038186803b1580156105f557600080fd5b505afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d91906126d7565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8e6040518263ffffffff1660e01b81526004016106aa91906136da565b60206040518083038186803b1580156106c257600080fd5b505afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa91906124f6565b6040518263ffffffff1660e01b815260040161071691906135d8565b60206040518083038186803b15801561072e57600080fd5b505afa158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190612672565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630af88b246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080891906124f6565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561090b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8c6040518263ffffffff1660e01b815260040161089691906136da565b60206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e691906124f6565b73ffffffffffffffffffffffffffffffffffffffff163181610908919061385f565b90505b600082600361091a919061385f565b600a61092691906139a3565b82856109329190613ac1565b61093c919061391f565b905060038573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561098657600080fd5b505afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be9190612840565b60ff166109cb9190613baf565b600a6109d791906139a3565b816109e2919061391f565b905060038573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2c57600080fd5b505afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190612840565b60ff16610a719190613baf565b600a610a7d91906139a3565b82610a88919061391f565b915060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250898881518110610af4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508088602001818151610b11919061385f565b915081815250505050505050505b8080610b2a90613d77565b9150506103d4565b50610b4c82600060018551610b479190613baf565b6119a4565b60005b8351811015610c64576000838281518110610b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015190506003821115610bc9578083604001818151610bbc919061385f565b9150818152505050610c51565b838281518110610c02577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183606001518360048110610c47577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181905250505b8080610c5c90613d77565b915050610b4f565b50809350505050919050565b6060610c7b826118a7565b8484604051602001610c8f939291906133e2565b60405160208183030381529060405290509392505050565b6060610cbf83600886901b601088901b171783611c5e565b9050949350505050565b6060610cd4856118a7565b610cdd856118a7565b610ce6856118a7565b84604051602001610cfa9493929190613563565b6040516020818303038152906040529050949350505050565b60606000806040518060a0016040528060628152602001614897606291399050610d3b6122d3565b60005b6004811015610e6b57610e17610d60878680610d5990613d77565b97506117dd565b610d76888780610d6f90613d77565b98506117dd565b610d8c898880610d8590613d77565b99506117dd565b6000600286610d9b9190613dee565b14610ddb576040518060400160405280600381526020017f302e310000000000000000000000000000000000000000000000000000000000815250610e12565b6040518060400160405280600381526020017f302e3400000000000000000000000000000000000000000000000000000000008152505b610cc9565b828260048110610e50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052508080610e6390613d77565b915050610d3e565b5081610ef582600060048110610eaa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015183600160048110610ee9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516000610c70565b610f7d83600260048110610f32577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015184600360048110610f71577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516001610c70565b604051602001610f8f93929190613254565b60405160208183030381529060405291506000610fab86610284565b90506000600a606460ff6103e8610fce8b8a80610fc790613d77565b9b506117dd565b610fd89190613ac1565b610fe2919061391f565b610fec919061391f565b605061012c610ffb9190613baf565b6110059190613ac1565b61100f919061391f565b605061101b919061385f565b90506000600a606460ff6103e861103e8c8b8061103790613d77565b9c506117dd565b6110489190613ac1565b611052919061391f565b61105c919061391f565b605061012c61106b9190613baf565b6110759190613ac1565b61107f919061391f565b605061108b919061385f565b9050818111156110a2576000829050819250809150505b600060086110bc8a89806110b590613d77565b9a506117dd565b6110c69190613dee565b602d6110d29190613ac1565b9050600060086110ee8b8a806110e790613d77565b9b506117dd565b6110f89190613dee565b602d6111049190613ac1565b905060008060026111218d8c8061111a90613d77565b9d506117dd565b61112b9190613dee565b146111415761113c85846000611741565b61114e565b61114d8584600061020d565b5b9050600080600261116b8e8d8061116490613d77565b9e506117dd565b6111759190613dee565b1461118b5761118685846001611741565b611198565b6111978584600161020d565b5b90508882826040516020016111af93929190613097565b6040516020818303038152906040529850886111ca8d6118a7565b6040516020016111db9291906132c8565b604051602081830303815290604052985060005b87606001515060048110156116235760008860600151826004811061123d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600001519050600089606001518360048110611287577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015160400151905060008a6060015184600481106112d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151602001519050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561131957505050611610565b60008390506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630af88b246040518163ffffffff1660e01b815260040160206040518083038186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c091906124f6565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561149d57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357ba7046040518163ffffffff1660e01b815260040160006040518083038186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114989190612589565b611521565b8173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156114e357600080fd5b505afa1580156114f7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906115209190612589565b5b90508e61154587602d6115349190613ac1565b6064611540919061385f565b6118a7565b82604051602001611558939291906131b0565b6040516020818303038152906040529e508e61158b87602d61157a9190613ac1565b6064611586919061385f565b6118a7565b611597866103e7611f33565b6040516020016115a9939291906130c8565b6040516020818303038152906040529e508e6115dc87602d6115cb9190613ac1565b60726115d7919061385f565b6118a7565b6115e7856003611f33565b6040516020016115f993929190613202565b6040516020818303038152906040529e5050505050505b808061161b90613d77565b9150506111ef565b50886040516020016116359190613154565b60405160208183030381529060405298508861165788604001516103e7611f33565b60405160200161166892919061311a565b60405160208183030381529060405298508861168a88602001516103e7611f33565b60405160200161169b929190613176565b6040516020818303038152906040529850886040516020016116bd91906132a6565b6040516020818303038152906040529850600061170a6116dc8e6118a7565b6116e58c6120b0565b6040516020016116f692919061343f565b6040516020818303038152906040526120b0565b90508060405160200161171d9190613484565b6040516020818303038152906040529950899b505050505050505050505050919050565b6060600061176760028661012c6117589190613baf565b611762919061391f565b6118a7565b90506000611782600261012c61177d919061391f565b6118a7565b905061178d846118a7565b8283611798896118a7565b6117a18a6118a7565b6117aa8a6118a7565b86876040516020016117c3989796959493929190613302565b604051602081830303815290604052925050509392505050565b600060208210611822576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118199061369e565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460405160200161185892919061306b565b604051602081830303815290604052805190602001209050600060088461187f9190613ac1565b60ff901b60001b90506008846118959190613ac1565b818316901c60001c9250505092915050565b606060008214156118ef576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061199f565b604e67ffffffffffffffff811115611930577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119625781602001600182028036833780820191505090505b5090506000604e90505b6000831461199257600a83066030018082840152600182039150600a840493505061196c565b808201915080604e038252505b919050565b60008290506000829050808214156119bd575050611c59565b600085600286866119ce9190613b1b565b6119d891906138b5565b866119e391906137cb565b81518110611a1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190505b818313611c2d575b8060400151868481518110611a6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604001511115611a90578280611a8890613d2e565b935050611a2d565b5b858281518110611aca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015181604001511115611af4578180611aec90613c8a565b925050611a91565b818313611c28576000868381518110611b36577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050868481518110611b79577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151878481518110611bba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080878581518110611bff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508380611c1590613d2e565b9450508280611c2390613c8a565b935050505b611a25565b81851215611c4157611c408686846119a4565b5b83831215611c5557611c548684866119a4565b5b5050505b505050565b606062ffffff831115611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d9061367e565b60405180910390fd5b60ff821115611cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce19061365e565b60405180910390fd5b81600884901b1792506000600b67ffffffffffffffff811115611d36577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d685781602001600182028036833780820191505090505b5090507f230000000000000000000000000000000000000000000000000000000000000081600081518110611dc6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600990505b6001811115611ee5577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611e61577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611e9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611ede90613cd3565b9050611dfc565b5060008414611f29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f209061363e565b60405180910390fd5b8091505092915050565b60606000831415611f7b576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120aa565b604e67ffffffffffffffff811115611fbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611fee5781602001600182028036833780820191505090505b5090506000604e905060005b6000851461209c57600a85066030018083850152600183039250600a860495506001820191505060006003826120309190613dee565b14801561203e575060008514155b801561204a5750838114155b1561206257602c808385015260018303925050612097565b8381141561209657602e808385015260018303925050600085141561209557600a85066030018083850152600183039250505b5b5b611ffa565b818301925081604e03835250505b92915050565b606060008251905060008114156120d95760405180602001604052806000815250915050612269565b600060036002836120ea919061385f565b6120f4919061391f565b60046121009190613ac1565b90506000602082612111919061385f565b67ffffffffffffffff811115612150577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121825781602001600182028036833780820191505090505b5090506000604051806060016040528060408152602001614857604091399050600181016020830160005b868110156122265760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b905080845260048401935050506121ad565b50600386066001811461224057600281146122505761225b565b613d3d60f01b600283035261225b565b603d60f81b60018303525b508484525050819450505050505b919050565b60405180608001604052806000815260200160008152602001600081526020016122966122fa565b81525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60405180608001604052806004905b60608152602001906001900390816122e25790505090565b60405180608001604052806004905b61231161229c565b8152602001906001900390816123095790505090565b600061233a6123358461371a565b6136f5565b9050808382526020820190508285602086028201111561235957600080fd5b60005b85811015612389578161236f888261240f565b84526020840193506020830192505060018101905061235c565b5050509392505050565b60006123a66123a184613746565b6136f5565b9050828152602081018484840111156123be57600080fd5b6123c9848285613c48565b509392505050565b60006123e46123df84613746565b6136f5565b9050828152602081018484840111156123fc57600080fd5b612407848285613c57565b509392505050565b60008151905061241e816147fa565b92915050565b600082601f83011261243557600080fd5b8151612445848260208601612327565b91505092915050565b60008151905061245d81614811565b92915050565b600082601f83011261247457600080fd5b8135612484848260208601612393565b91505092915050565b600082601f83011261249e57600080fd5b81516124ae8482602086016123d1565b91505092915050565b6000813590506124c681614828565b92915050565b6000815190506124db81614828565b92915050565b6000815190506124f08161483f565b92915050565b60006020828403121561250857600080fd5b60006125168482850161240f565b91505092915050565b60006020828403121561253157600080fd5b600082015167ffffffffffffffff81111561254b57600080fd5b61255784828501612424565b91505092915050565b60006020828403121561257257600080fd5b60006125808482850161244e565b91505092915050565b60006020828403121561259b57600080fd5b600082015167ffffffffffffffff8111156125b557600080fd5b6125c18482850161248d565b91505092915050565b6000806000606084860312156125df57600080fd5b600084013567ffffffffffffffff8111156125f957600080fd5b61260586828701612463565b935050602084013567ffffffffffffffff81111561262257600080fd5b61262e86828701612463565b925050604061263f868287016124b7565b9150509250925092565b60006020828403121561265b57600080fd5b6000612669848285016124b7565b91505092915050565b60006020828403121561268457600080fd5b6000612692848285016124cc565b91505092915050565b600080604083850312156126ae57600080fd5b60006126bc858286016124b7565b92505060206126cd858286016124b7565b9150509250929050565b600080604083850312156126ea57600080fd5b60006126f8858286016124cc565b9250506020612709858286016124cc565b9150509250929050565b60008060006060848603121561272857600080fd5b6000612736868287016124b7565b9350506020612747868287016124b7565b9250506040612758868287016124b7565b9150509250925092565b6000806000806080858703121561277857600080fd5b6000612786878288016124b7565b9450506020612797878288016124b7565b93505060406127a8878288016124b7565b925050606085013567ffffffffffffffff8111156127c557600080fd5b6127d187828801612463565b91505092959194509250565b600080600080608085870312156127f357600080fd5b6000612801878288016124b7565b9450506020612812878288016124b7565b9350506040612823878288016124b7565b9250506060612834878288016124b7565b91505092959194509250565b60006020828403121561285257600080fd5b6000612860848285016124e1565b91505092915050565b60006128758383612f9e565b60608301905092915050565b61288a81613be3565b82525050565b61289981613be3565b82525050565b6128b06128ab82613be3565b613dc0565b82525050565b6128bf81613781565b6128c981846137a4565b92506128d482613777565b8060005b838110156129055781516128ec8782612869565b96506128f783613797565b9250506001810190506128d8565b505050505050565b60006129188261378c565b61292281856137af565b9350612932818560208601613c57565b61293b81613eac565b840191505092915050565b60006129518261378c565b61295b81856137c0565b935061296b818560208601613c57565b80840191505092915050565b60006129846020836137af565b915061298f82613ed7565b602082019050919050565b60006129a76006836137c0565b91506129b282613f00565b600682019050919050565b60006129ca60a9836137c0565b91506129d582613f29565b60a982019050919050565b60006129ed6005836137c0565b91506129f882614010565b600582019050919050565b6000612a106011836137c0565b9150612a1b82614039565b601182019050919050565b6000612a336008836137c0565b9150612a3e82614062565b600882019050919050565b6000612a566023836137c0565b9150612a618261408b565b602382019050919050565b6000612a796024836137c0565b9150612a84826140da565b602482019050919050565b6000612a9c6016836137c0565b9150612aa782614129565b601682019050919050565b6000612abf600a836137c0565b9150612aca82614152565b600a82019050919050565b6000612ae26019836137af565b9150612aed8261417b565b602082019050919050565b6000612b056019836137c0565b9150612b10826141a4565b601982019050919050565b6000612b28602e836137c0565b9150612b33826141cd565b602e82019050919050565b6000612b4b6001836137c0565b9150612b568261421c565b600182019050919050565b6000612b6e6010836137c0565b9150612b7982614245565b601082019050919050565b6000612b91602f836137c0565b9150612b9c8261426e565b602f82019050919050565b6000612bb46014836137c0565b9150612bbf826142bd565b601482019050919050565b6000612bd76001836137c0565b9150612be2826142e6565b600182019050919050565b6000612bfa6001836137c0565b9150612c058261430f565b600182019050919050565b6000612c1d6004836137c0565b9150612c2882614338565b600482019050919050565b6000612c40600f836137c0565b9150612c4b82614361565b600f82019050919050565b6000612c63601b836137c0565b9150612c6e8261438a565b601b82019050919050565b6000612c866002836137c0565b9150612c91826143b3565b600282019050919050565b6000612ca96007836137c0565b9150612cb4826143dc565b600782019050919050565b6000612ccc6005836137c0565b9150612cd782614405565b600582019050919050565b6000612cef6007836137c0565b9150612cfa8261442e565b600782019050919050565b6000612d126022836137c0565b9150612d1d82614457565b602282019050919050565b6000612d356014836137c0565b9150612d40826144a6565b601482019050919050565b6000612d58601b836137af565b9150612d63826144cf565b602082019050919050565b6000612d7b6010836137c0565b9150612d86826144f8565b601082019050919050565b6000612d9e6015836137c0565b9150612da982614521565b601582019050919050565b6000612dc16006836137c0565b9150612dcc8261454a565b600682019050919050565b6000612de46002836137c0565b9150612def82614573565b600282019050919050565b6000612e07601d836137c0565b9150612e128261459c565b601d82019050919050565b6000612e2a6014836137af565b9150612e35826145c5565b602082019050919050565b6000612e4d6005836137c0565b9150612e58826145ee565b600582019050919050565b6000612e706013836137c0565b9150612e7b82614617565b601382019050919050565b6000612e936000836137c0565b9150612e9e82614640565b600082019050919050565b6000612eb66006836137c0565b9150612ec182614643565b600682019050919050565b6000612ed96006836137c0565b9150612ee48261466c565b600682019050919050565b6000612efc6028836137c0565b9150612f0782614695565b602882019050919050565b6000612f1f6018836137c0565b9150612f2a826146e4565b601882019050919050565b6000612f426005836137c0565b9150612f4d8261470d565b600582019050919050565b6000612f656072836137c0565b9150612f7082614736565b607282019050919050565b6000612f886015836137c0565b9150612f93826147d1565b601582019050919050565b606082016000820151612fb46000850182612881565b506020820151612fc76020850182613036565b506040820151612fda6040850182613036565b50505050565b6101e082016000820151612ff76000850182613036565b50602082015161300a6020850182613036565b50604082015161301d6040850182613036565b50606082015161303060608501826128b6565b50505050565b61303f81613c31565b82525050565b61304e81613c31565b82525050565b61306561306082613c31565b613de4565b82525050565b6000613077828561289f565b6014820191506130878284613054565b6020820191508190509392505050565b60006130a38286612946565b91506130af8285612946565b91506130bb8284612946565b9150819050949350505050565b60006130d48286612946565b91506130df82612a03565b91506130eb8285612946565b91506130f682612b61565b91506131028284612946565b915061310d82612c9c565b9150819050949350505050565b60006131268285612946565b915061313182612a6c565b915061313d8284612946565b915061314882612c9c565b91508190509392505050565b60006131608284612946565b915061316b82612b1b565b915081905092915050565b60006131828285612946565b915061318d82612d05565b91506131998284612946565b91506131a482612c9c565b91508190509392505050565b60006131bc8286612946565b91506131c782612d6e565b91506131d38285612946565b91506131de82612c33565b91506131ea8284612946565b91506131f582612c9c565b9150819050949350505050565b600061320e8286612946565b915061321982612d6e565b91506132258285612946565b915061323082612e63565b915061323c8284612946565b915061324782612c9c565b9150819050949350505050565b60006132608286612946565b915061326b82612ea9565b91506132778285612946565b91506132838284612946565b915061328e826129bd565b915061329982612b84565b9150819050949350505050565b60006132b28284612946565b91506132bd82612ecc565b915081905092915050565b60006132d48285612946565b91506132df82612eef565b91506132eb8284612946565b91506132f682612c9c565b91508190509392505050565b600061330d82612a8f565b9150613319828b612946565b915061332482612db4565b9150613330828a612946565b915061333b82612e40565b91506133478289612946565b915061335282612bed565b915061335d82612a26565b91506133698288612946565b915061337482612ab2565b91506133808287612946565b915061338b82612d28565b91506133978286612946565b91506133a282612bca565b91506133ae8285612946565b91506133b982612bca565b91506133c58284612946565b91506133d0826129e0565b91508190509998505050505050505050565b60006133ed82612af8565b91506133f98286612946565b915061340482612f7b565b91506134108285612946565b915061341b82612a49565b91506134278284612946565b915061343282612ba7565b9150819050949350505050565b600061344a82612c56565b91506134568285612946565b915061346182612f58565b915061346d8284612946565b915061347882612c79565b91508190509392505050565b600061348f82612dfa565b915061349b8284612946565b915081905092915050565b60006134b182612f12565b91506134bd828a612946565b91506134c882612d91565b91506134d48289612946565b91506134df82612e86565b91506134eb8288612946565b91506134f682612bca565b91506135028287612946565b915061350d82612ce2565b91506135198286612946565b91506135248261299a565b91506135308285612946565b915061353b82612cbf565b91506135478284612946565b915061355282612c10565b915081905098975050505050505050565b600061356e82612f35565b915061357a8287612946565b915061358582612dd7565b91506135918286612946565b915061359c82612dd7565b91506135a88285612946565b91506135b382612dd7565b91506135bf8284612946565b91506135ca82612b3e565b915081905095945050505050565b60006020820190506135ed6000830184612890565b92915050565b60006040820190506136086000830185612890565b6136156020830184612890565b9392505050565b60006020820190508181036000830152613636818461290d565b905092915050565b6000602082019050818103600083015261365781612977565b9050919050565b6000602082019050818103600083015261367781612ad5565b9050919050565b6000602082019050818103600083015261369781612d4b565b9050919050565b600060208201905081810360008301526136b781612e1d565b9050919050565b60006101e0820190506136d46000830184612fe0565b92915050565b60006020820190506136ef6000830184613045565b92915050565b60006136ff613710565b905061370b8282613cfd565b919050565b6000604051905090565b600067ffffffffffffffff82111561373557613734613e7d565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561376157613760613e7d565b5b61376a82613eac565b9050602081019050919050565b6000819050919050565b600060049050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006137d682613c07565b91506137e183613c07565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561381c5761381b613e1f565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561385457613853613e1f565b5b828201905092915050565b600061386a82613c31565b915061387583613c31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156138aa576138a9613e1f565b5b828201905092915050565b60006138c082613c07565b91506138cb83613c07565b9250826138db576138da613e4e565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561391457613913613e1f565b5b828205905092915050565b600061392a82613c31565b915061393583613c31565b92508261394557613944613e4e565b5b828204905092915050565b6000808291508390505b600185111561399a5780860481111561397657613975613e1f565b5b60018516156139855780820291505b808102905061399385613eca565b945061395a565b94509492505050565b60006139ae82613c31565b91506139b983613c31565b92506139e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846139ee565b905092915050565b6000826139fe5760019050613aba565b81613a0c5760009050613aba565b8160018114613a225760028114613a2c57613a5b565b6001915050613aba565b60ff841115613a3e57613a3d613e1f565b5b8360020a915084821115613a5557613a54613e1f565b5b50613aba565b5060208310610133831016604e8410600b8410161715613a905782820a905083811115613a8b57613a8a613e1f565b5b613aba565b613a9d8484846001613950565b92509050818404811115613ab457613ab3613e1f565b5b81810290505b9392505050565b6000613acc82613c31565b9150613ad783613c31565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b1057613b0f613e1f565b5b828202905092915050565b6000613b2682613c07565b9150613b3183613c07565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615613b6c57613b6b613e1f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615613ba457613ba3613e1f565b5b828203905092915050565b6000613bba82613c31565b9150613bc583613c31565b925082821015613bd857613bd7613e1f565b5b828203905092915050565b6000613bee82613c11565b9050919050565b6000613c0082613be3565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613c75578082015181840152602081019050613c5a565b83811115613c84576000848401525b50505050565b6000613c9582613c07565b91507f8000000000000000000000000000000000000000000000000000000000000000821415613cc857613cc7613e1f565b5b600182039050919050565b6000613cde82613c31565b91506000821415613cf257613cf1613e1f565b5b600182039050919050565b613d0682613eac565b810181811067ffffffffffffffff82111715613d2557613d24613e7d565b5b80604052505050565b6000613d3982613c07565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d6c57613d6b613e1f565b5b600182019050919050565b6000613d8282613c31565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613db557613db4613e1f565b5b600182019050919050565b6000613dcb82613dd2565b9050919050565b6000613ddd82613ebd565b9050919050565b6000819050919050565b6000613df982613c31565b9150613e0483613c31565b925082613e1457613e13613e4e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f222063793d220000000000000000000000000000000000000000000000000000600082015250565b7f3c7374796c653e2e62617365207b20666f6e743a20626f6c642033307078207360008201527f616e732d73657269663b2066696c6c3a2077686974657d2e6974656d207b206660208201527f6f6e743a206e6f726d616c20323470782073616e732d73657269663b2066696c60408201527f6c3a2077686974657d2e737562207b20666f6e743a206e6f726d616c2031347060608201527f782073616e732d73657269663b2066696c6c3a2077686974657d3c2f7374796c60808201527f653e3c2f646566733e000000000000000000000000000000000000000000000060a082015250565b7f2922202f3e000000000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d223135302220793d22000000000000000000000000000000600082015250565b7f2077696474683d22000000000000000000000000000000000000000000000000600082015250565b7f222f3e203c73746f70206f66667365743d22302e35222073746f702d636f6c6f60008201527f723d220000000000000000000000000000000000000000000000000000000000602082015250565b7f3c7465787420783d223135302220793d223238302220636c6173733d2269746560008201527f6d223e2400000000000000000000000000000000000000000000000000000000602082015250565b7f3c726563742066696c6c3d2275726c28237061696e7400000000000000000000600082015250565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b7f4f7061636974792067726561746572207468616e203078666600000000000000600082015250565b7f3c6c696e6561724772616469656e742069643d227061696e7400000000000000600082015250565b7f3c7465787420783d2232302220793d223238302220636c6173733d226974656d60008201527f223e4f746865723c2f746578743e000000000000000000000000000000000000602082015250565b7f2900000000000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226974656d223e2400000000000000000000000000000000600082015250565b7f3c726563742077696474683d2233303022206865696768743d2233303022206660008201527f696c6c3d2223323732373237222f3e0000000000000000000000000000000000602082015250565b7f222f3e3c2f6c696e6561724772616469656e743e000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b7f22202f3e00000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226974656d223e0000000000000000000000000000000000600082015250565b7f7b226e616d65223a202242616c616e6365205761746368657220230000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f746578743e00000000000000000000000000000000000000000000000000600082015250565b7f2220723d22000000000000000000000000000000000000000000000000000000600082015250565b7f29222063783d2200000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d2232302220793d2235382220636c6173733d22626173652260008201527f3e24000000000000000000000000000000000000000000000000000000000000602082015250565b7f22207472616e73666f726d3d22726f7461746528000000000000000000000000600082015250565b7f56616c75652067726561746572207468616e2030786666666666660000000000600082015250565b7f3c7465787420783d2232302220793d2200000000000000000000000000000000600082015250565b7f2922207472616e73666f726d3d22726f74617465280000000000000000000000600082015250565b7f292220783d220000000000000000000000000000000000000000000000000000600082015250565b7f2c20000000000000000000000000000000000000000000000000000000000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4f6666736574206f7574206f6620626f756e6473000000000000000000000000600082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226261736520737562223e00000000000000000000000000600082015250565b50565b7f3c646566733e0000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d2232302220793d2233302220636c6173733d22737562223e60008201527f57616c6c65742023000000000000000000000000000000000000000000000000602082015250565b7f3c636972636c652066696c6c3d2275726c28237061696e740000000000000000600082015250565b7f7267626128000000000000000000000000000000000000000000000000000000600082015250565b7f222c20226465736372697074696f6e223a202254686973204e4654206469737060008201527f6c61797320697473206f776e6572732062616c616e636573206f66207472616360208201527f6b656420746f6b656e732e222c2022696d616765223a2022646174613a696d6160408201527f67652f7376672b786d6c3b6261736536342c0000000000000000000000000000606082015250565b7f223e203c73746f702073746f702d636f6c6f723d220000000000000000000000600082015250565b61480381613be3565b811461480e57600080fd5b50565b61481a81613bf5565b811461482557600080fd5b50565b61483181613c31565b811461483c57600080fd5b50565b61484881613c3b565b811461485357600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302033303020333030223ea264697066735822122056233d51729822fd5f41e594ac2912fdc3c0e398793efd7ac17dad9b985ab77864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80635e5ca9871161005b5780635e5ca9871461014d578063c87b56dd1461017d578063cce7065c146101ad578063d61b051b146101dd57610088565b80633c2c5cb61461008d57806343adc6be146100bd5780634bdcdcf3146100ed578063539cf0381461011d575b600080fd5b6100a760048036038101906100a29190612713565b61020d565b6040516100b4919061361c565b60405180910390f35b6100d760048036038101906100d29190612649565b610284565b6040516100e491906136be565b60405180910390f35b610107600480360381019061010291906125ca565b610c70565b604051610114919061361c565b60405180910390f35b610137600480360381019061013291906127dd565b610ca7565b604051610144919061361c565b60405180910390f35b61016760048036038101906101629190612762565b610cc9565b604051610174919061361c565b60405180910390f35b61019760048036038101906101929190612649565b610d13565b6040516101a4919061361c565b60405180910390f35b6101c760048036038101906101c29190612713565b611741565b6040516101d4919061361c565b60405180910390f35b6101f760048036038101906101f2919061269b565b6117dd565b60405161020491906136da565b60405180910390f35b60606000610228600261012c610223919061391f565b6118a7565b9050610233836118a7565b61023c856118a7565b8283848561025560028c610250919061391f565b6118a7565b60405160200161026b97969594939291906134a6565b6040516020818303038152906040529150509392505050565b61028c61226e565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c591a491846040518263ffffffff1660e01b81526004016102e991906136da565b60006040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061033e919061251f565b90506000815167ffffffffffffffff811115610383577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103bc57816020015b6103a961229c565b8152602001906001900390816103a15790505b5090506103c761226e565b8481600001818152505060005b8351811015610b32576000848281518110610418577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561045d5750610b1f565b6000819050600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632421d7266040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cd57600080fd5b505afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190612560565b73ffffffffffffffffffffffffffffffffffffffff16634a5aa711600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cb374bd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c091906124f6565b866040518363ffffffff1660e01b81526004016105de9291906135f3565b604080518083038186803b1580156105f557600080fd5b505afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d91906126d7565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8e6040518263ffffffff1660e01b81526004016106aa91906136da565b60206040518083038186803b1580156106c257600080fd5b505afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa91906124f6565b6040518263ffffffff1660e01b815260040161071691906135d8565b60206040518083038186803b15801561072e57600080fd5b505afa158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190612672565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630af88b246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080891906124f6565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561090b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8c6040518263ffffffff1660e01b815260040161089691906136da565b60206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e691906124f6565b73ffffffffffffffffffffffffffffffffffffffff163181610908919061385f565b90505b600082600361091a919061385f565b600a61092691906139a3565b82856109329190613ac1565b61093c919061391f565b905060038573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561098657600080fd5b505afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be9190612840565b60ff166109cb9190613baf565b600a6109d791906139a3565b816109e2919061391f565b905060038573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2c57600080fd5b505afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190612840565b60ff16610a719190613baf565b600a610a7d91906139a3565b82610a88919061391f565b915060405180606001604052808773ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250898881518110610af4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508088602001818151610b11919061385f565b915081815250505050505050505b8080610b2a90613d77565b9150506103d4565b50610b4c82600060018551610b479190613baf565b6119a4565b60005b8351811015610c64576000838281518110610b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015190506003821115610bc9578083604001818151610bbc919061385f565b9150818152505050610c51565b838281518110610c02577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183606001518360048110610c47577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181905250505b8080610c5c90613d77565b915050610b4f565b50809350505050919050565b6060610c7b826118a7565b8484604051602001610c8f939291906133e2565b60405160208183030381529060405290509392505050565b6060610cbf83600886901b601088901b171783611c5e565b9050949350505050565b6060610cd4856118a7565b610cdd856118a7565b610ce6856118a7565b84604051602001610cfa9493929190613563565b6040516020818303038152906040529050949350505050565b60606000806040518060a0016040528060628152602001614897606291399050610d3b6122d3565b60005b6004811015610e6b57610e17610d60878680610d5990613d77565b97506117dd565b610d76888780610d6f90613d77565b98506117dd565b610d8c898880610d8590613d77565b99506117dd565b6000600286610d9b9190613dee565b14610ddb576040518060400160405280600381526020017f302e310000000000000000000000000000000000000000000000000000000000815250610e12565b6040518060400160405280600381526020017f302e3400000000000000000000000000000000000000000000000000000000008152505b610cc9565b828260048110610e50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201819052508080610e6390613d77565b915050610d3e565b5081610ef582600060048110610eaa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015183600160048110610ee9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516000610c70565b610f7d83600260048110610f32577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015184600360048110610f71577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516001610c70565b604051602001610f8f93929190613254565b60405160208183030381529060405291506000610fab86610284565b90506000600a606460ff6103e8610fce8b8a80610fc790613d77565b9b506117dd565b610fd89190613ac1565b610fe2919061391f565b610fec919061391f565b605061012c610ffb9190613baf565b6110059190613ac1565b61100f919061391f565b605061101b919061385f565b90506000600a606460ff6103e861103e8c8b8061103790613d77565b9c506117dd565b6110489190613ac1565b611052919061391f565b61105c919061391f565b605061012c61106b9190613baf565b6110759190613ac1565b61107f919061391f565b605061108b919061385f565b9050818111156110a2576000829050819250809150505b600060086110bc8a89806110b590613d77565b9a506117dd565b6110c69190613dee565b602d6110d29190613ac1565b9050600060086110ee8b8a806110e790613d77565b9b506117dd565b6110f89190613dee565b602d6111049190613ac1565b905060008060026111218d8c8061111a90613d77565b9d506117dd565b61112b9190613dee565b146111415761113c85846000611741565b61114e565b61114d8584600061020d565b5b9050600080600261116b8e8d8061116490613d77565b9e506117dd565b6111759190613dee565b1461118b5761118685846001611741565b611198565b6111978584600161020d565b5b90508882826040516020016111af93929190613097565b6040516020818303038152906040529850886111ca8d6118a7565b6040516020016111db9291906132c8565b604051602081830303815290604052985060005b87606001515060048110156116235760008860600151826004811061123d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600001519050600089606001518360048110611287577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015160400151905060008a6060015184600481106112d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151602001519050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561131957505050611610565b60008390506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630af88b246040518163ffffffff1660e01b815260040160206040518083038186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c091906124f6565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561149d57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663357ba7046040518163ffffffff1660e01b815260040160006040518083038186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114989190612589565b611521565b8173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156114e357600080fd5b505afa1580156114f7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906115209190612589565b5b90508e61154587602d6115349190613ac1565b6064611540919061385f565b6118a7565b82604051602001611558939291906131b0565b6040516020818303038152906040529e508e61158b87602d61157a9190613ac1565b6064611586919061385f565b6118a7565b611597866103e7611f33565b6040516020016115a9939291906130c8565b6040516020818303038152906040529e508e6115dc87602d6115cb9190613ac1565b60726115d7919061385f565b6118a7565b6115e7856003611f33565b6040516020016115f993929190613202565b6040516020818303038152906040529e5050505050505b808061161b90613d77565b9150506111ef565b50886040516020016116359190613154565b60405160208183030381529060405298508861165788604001516103e7611f33565b60405160200161166892919061311a565b60405160208183030381529060405298508861168a88602001516103e7611f33565b60405160200161169b929190613176565b6040516020818303038152906040529850886040516020016116bd91906132a6565b6040516020818303038152906040529850600061170a6116dc8e6118a7565b6116e58c6120b0565b6040516020016116f692919061343f565b6040516020818303038152906040526120b0565b90508060405160200161171d9190613484565b6040516020818303038152906040529950899b505050505050505050505050919050565b6060600061176760028661012c6117589190613baf565b611762919061391f565b6118a7565b90506000611782600261012c61177d919061391f565b6118a7565b905061178d846118a7565b8283611798896118a7565b6117a18a6118a7565b6117aa8a6118a7565b86876040516020016117c3989796959493929190613302565b604051602081830303815290604052925050509392505050565b600060208210611822576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118199061369e565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460405160200161185892919061306b565b604051602081830303815290604052805190602001209050600060088461187f9190613ac1565b60ff901b60001b90506008846118959190613ac1565b818316901c60001c9250505092915050565b606060008214156118ef576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061199f565b604e67ffffffffffffffff811115611930577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119625781602001600182028036833780820191505090505b5090506000604e90505b6000831461199257600a83066030018082840152600182039150600a840493505061196c565b808201915080604e038252505b919050565b60008290506000829050808214156119bd575050611c59565b600085600286866119ce9190613b1b565b6119d891906138b5565b866119e391906137cb565b81518110611a1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190505b818313611c2d575b8060400151868481518110611a6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604001511115611a90578280611a8890613d2e565b935050611a2d565b5b858281518110611aca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015181604001511115611af4578180611aec90613c8a565b925050611a91565b818313611c28576000868381518110611b36577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050868481518110611b79577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151878481518110611bba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080878581518110611bff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508380611c1590613d2e565b9450508280611c2390613c8a565b935050505b611a25565b81851215611c4157611c408686846119a4565b5b83831215611c5557611c548684866119a4565b5b5050505b505050565b606062ffffff831115611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d9061367e565b60405180910390fd5b60ff821115611cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce19061365e565b60405180910390fd5b81600884901b1792506000600b67ffffffffffffffff811115611d36577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d685781602001600182028036833780820191505090505b5090507f230000000000000000000000000000000000000000000000000000000000000081600081518110611dc6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600990505b6001811115611ee5577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611e61577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611e9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611ede90613cd3565b9050611dfc565b5060008414611f29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f209061363e565b60405180910390fd5b8091505092915050565b60606000831415611f7b576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120aa565b604e67ffffffffffffffff811115611fbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611fee5781602001600182028036833780820191505090505b5090506000604e905060005b6000851461209c57600a85066030018083850152600183039250600a860495506001820191505060006003826120309190613dee565b14801561203e575060008514155b801561204a5750838114155b1561206257602c808385015260018303925050612097565b8381141561209657602e808385015260018303925050600085141561209557600a85066030018083850152600183039250505b5b5b611ffa565b818301925081604e03835250505b92915050565b606060008251905060008114156120d95760405180602001604052806000815250915050612269565b600060036002836120ea919061385f565b6120f4919061391f565b60046121009190613ac1565b90506000602082612111919061385f565b67ffffffffffffffff811115612150577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121825781602001600182028036833780820191505090505b5090506000604051806060016040528060408152602001614857604091399050600181016020830160005b868110156122265760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b905080845260048401935050506121ad565b50600386066001811461224057600281146122505761225b565b613d3d60f01b600283035261225b565b603d60f81b60018303525b508484525050819450505050505b919050565b60405180608001604052806000815260200160008152602001600081526020016122966122fa565b81525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60405180608001604052806004905b60608152602001906001900390816122e25790505090565b60405180608001604052806004905b61231161229c565b8152602001906001900390816123095790505090565b600061233a6123358461371a565b6136f5565b9050808382526020820190508285602086028201111561235957600080fd5b60005b85811015612389578161236f888261240f565b84526020840193506020830192505060018101905061235c565b5050509392505050565b60006123a66123a184613746565b6136f5565b9050828152602081018484840111156123be57600080fd5b6123c9848285613c48565b509392505050565b60006123e46123df84613746565b6136f5565b9050828152602081018484840111156123fc57600080fd5b612407848285613c57565b509392505050565b60008151905061241e816147fa565b92915050565b600082601f83011261243557600080fd5b8151612445848260208601612327565b91505092915050565b60008151905061245d81614811565b92915050565b600082601f83011261247457600080fd5b8135612484848260208601612393565b91505092915050565b600082601f83011261249e57600080fd5b81516124ae8482602086016123d1565b91505092915050565b6000813590506124c681614828565b92915050565b6000815190506124db81614828565b92915050565b6000815190506124f08161483f565b92915050565b60006020828403121561250857600080fd5b60006125168482850161240f565b91505092915050565b60006020828403121561253157600080fd5b600082015167ffffffffffffffff81111561254b57600080fd5b61255784828501612424565b91505092915050565b60006020828403121561257257600080fd5b60006125808482850161244e565b91505092915050565b60006020828403121561259b57600080fd5b600082015167ffffffffffffffff8111156125b557600080fd5b6125c18482850161248d565b91505092915050565b6000806000606084860312156125df57600080fd5b600084013567ffffffffffffffff8111156125f957600080fd5b61260586828701612463565b935050602084013567ffffffffffffffff81111561262257600080fd5b61262e86828701612463565b925050604061263f868287016124b7565b9150509250925092565b60006020828403121561265b57600080fd5b6000612669848285016124b7565b91505092915050565b60006020828403121561268457600080fd5b6000612692848285016124cc565b91505092915050565b600080604083850312156126ae57600080fd5b60006126bc858286016124b7565b92505060206126cd858286016124b7565b9150509250929050565b600080604083850312156126ea57600080fd5b60006126f8858286016124cc565b9250506020612709858286016124cc565b9150509250929050565b60008060006060848603121561272857600080fd5b6000612736868287016124b7565b9350506020612747868287016124b7565b9250506040612758868287016124b7565b9150509250925092565b6000806000806080858703121561277857600080fd5b6000612786878288016124b7565b9450506020612797878288016124b7565b93505060406127a8878288016124b7565b925050606085013567ffffffffffffffff8111156127c557600080fd5b6127d187828801612463565b91505092959194509250565b600080600080608085870312156127f357600080fd5b6000612801878288016124b7565b9450506020612812878288016124b7565b9350506040612823878288016124b7565b9250506060612834878288016124b7565b91505092959194509250565b60006020828403121561285257600080fd5b6000612860848285016124e1565b91505092915050565b60006128758383612f9e565b60608301905092915050565b61288a81613be3565b82525050565b61289981613be3565b82525050565b6128b06128ab82613be3565b613dc0565b82525050565b6128bf81613781565b6128c981846137a4565b92506128d482613777565b8060005b838110156129055781516128ec8782612869565b96506128f783613797565b9250506001810190506128d8565b505050505050565b60006129188261378c565b61292281856137af565b9350612932818560208601613c57565b61293b81613eac565b840191505092915050565b60006129518261378c565b61295b81856137c0565b935061296b818560208601613c57565b80840191505092915050565b60006129846020836137af565b915061298f82613ed7565b602082019050919050565b60006129a76006836137c0565b91506129b282613f00565b600682019050919050565b60006129ca60a9836137c0565b91506129d582613f29565b60a982019050919050565b60006129ed6005836137c0565b91506129f882614010565b600582019050919050565b6000612a106011836137c0565b9150612a1b82614039565b601182019050919050565b6000612a336008836137c0565b9150612a3e82614062565b600882019050919050565b6000612a566023836137c0565b9150612a618261408b565b602382019050919050565b6000612a796024836137c0565b9150612a84826140da565b602482019050919050565b6000612a9c6016836137c0565b9150612aa782614129565b601682019050919050565b6000612abf600a836137c0565b9150612aca82614152565b600a82019050919050565b6000612ae26019836137af565b9150612aed8261417b565b602082019050919050565b6000612b056019836137c0565b9150612b10826141a4565b601982019050919050565b6000612b28602e836137c0565b9150612b33826141cd565b602e82019050919050565b6000612b4b6001836137c0565b9150612b568261421c565b600182019050919050565b6000612b6e6010836137c0565b9150612b7982614245565b601082019050919050565b6000612b91602f836137c0565b9150612b9c8261426e565b602f82019050919050565b6000612bb46014836137c0565b9150612bbf826142bd565b601482019050919050565b6000612bd76001836137c0565b9150612be2826142e6565b600182019050919050565b6000612bfa6001836137c0565b9150612c058261430f565b600182019050919050565b6000612c1d6004836137c0565b9150612c2882614338565b600482019050919050565b6000612c40600f836137c0565b9150612c4b82614361565b600f82019050919050565b6000612c63601b836137c0565b9150612c6e8261438a565b601b82019050919050565b6000612c866002836137c0565b9150612c91826143b3565b600282019050919050565b6000612ca96007836137c0565b9150612cb4826143dc565b600782019050919050565b6000612ccc6005836137c0565b9150612cd782614405565b600582019050919050565b6000612cef6007836137c0565b9150612cfa8261442e565b600782019050919050565b6000612d126022836137c0565b9150612d1d82614457565b602282019050919050565b6000612d356014836137c0565b9150612d40826144a6565b601482019050919050565b6000612d58601b836137af565b9150612d63826144cf565b602082019050919050565b6000612d7b6010836137c0565b9150612d86826144f8565b601082019050919050565b6000612d9e6015836137c0565b9150612da982614521565b601582019050919050565b6000612dc16006836137c0565b9150612dcc8261454a565b600682019050919050565b6000612de46002836137c0565b9150612def82614573565b600282019050919050565b6000612e07601d836137c0565b9150612e128261459c565b601d82019050919050565b6000612e2a6014836137af565b9150612e35826145c5565b602082019050919050565b6000612e4d6005836137c0565b9150612e58826145ee565b600582019050919050565b6000612e706013836137c0565b9150612e7b82614617565b601382019050919050565b6000612e936000836137c0565b9150612e9e82614640565b600082019050919050565b6000612eb66006836137c0565b9150612ec182614643565b600682019050919050565b6000612ed96006836137c0565b9150612ee48261466c565b600682019050919050565b6000612efc6028836137c0565b9150612f0782614695565b602882019050919050565b6000612f1f6018836137c0565b9150612f2a826146e4565b601882019050919050565b6000612f426005836137c0565b9150612f4d8261470d565b600582019050919050565b6000612f656072836137c0565b9150612f7082614736565b607282019050919050565b6000612f886015836137c0565b9150612f93826147d1565b601582019050919050565b606082016000820151612fb46000850182612881565b506020820151612fc76020850182613036565b506040820151612fda6040850182613036565b50505050565b6101e082016000820151612ff76000850182613036565b50602082015161300a6020850182613036565b50604082015161301d6040850182613036565b50606082015161303060608501826128b6565b50505050565b61303f81613c31565b82525050565b61304e81613c31565b82525050565b61306561306082613c31565b613de4565b82525050565b6000613077828561289f565b6014820191506130878284613054565b6020820191508190509392505050565b60006130a38286612946565b91506130af8285612946565b91506130bb8284612946565b9150819050949350505050565b60006130d48286612946565b91506130df82612a03565b91506130eb8285612946565b91506130f682612b61565b91506131028284612946565b915061310d82612c9c565b9150819050949350505050565b60006131268285612946565b915061313182612a6c565b915061313d8284612946565b915061314882612c9c565b91508190509392505050565b60006131608284612946565b915061316b82612b1b565b915081905092915050565b60006131828285612946565b915061318d82612d05565b91506131998284612946565b91506131a482612c9c565b91508190509392505050565b60006131bc8286612946565b91506131c782612d6e565b91506131d38285612946565b91506131de82612c33565b91506131ea8284612946565b91506131f582612c9c565b9150819050949350505050565b600061320e8286612946565b915061321982612d6e565b91506132258285612946565b915061323082612e63565b915061323c8284612946565b915061324782612c9c565b9150819050949350505050565b60006132608286612946565b915061326b82612ea9565b91506132778285612946565b91506132838284612946565b915061328e826129bd565b915061329982612b84565b9150819050949350505050565b60006132b28284612946565b91506132bd82612ecc565b915081905092915050565b60006132d48285612946565b91506132df82612eef565b91506132eb8284612946565b91506132f682612c9c565b91508190509392505050565b600061330d82612a8f565b9150613319828b612946565b915061332482612db4565b9150613330828a612946565b915061333b82612e40565b91506133478289612946565b915061335282612bed565b915061335d82612a26565b91506133698288612946565b915061337482612ab2565b91506133808287612946565b915061338b82612d28565b91506133978286612946565b91506133a282612bca565b91506133ae8285612946565b91506133b982612bca565b91506133c58284612946565b91506133d0826129e0565b91508190509998505050505050505050565b60006133ed82612af8565b91506133f98286612946565b915061340482612f7b565b91506134108285612946565b915061341b82612a49565b91506134278284612946565b915061343282612ba7565b9150819050949350505050565b600061344a82612c56565b91506134568285612946565b915061346182612f58565b915061346d8284612946565b915061347882612c79565b91508190509392505050565b600061348f82612dfa565b915061349b8284612946565b915081905092915050565b60006134b182612f12565b91506134bd828a612946565b91506134c882612d91565b91506134d48289612946565b91506134df82612e86565b91506134eb8288612946565b91506134f682612bca565b91506135028287612946565b915061350d82612ce2565b91506135198286612946565b91506135248261299a565b91506135308285612946565b915061353b82612cbf565b91506135478284612946565b915061355282612c10565b915081905098975050505050505050565b600061356e82612f35565b915061357a8287612946565b915061358582612dd7565b91506135918286612946565b915061359c82612dd7565b91506135a88285612946565b91506135b382612dd7565b91506135bf8284612946565b91506135ca82612b3e565b915081905095945050505050565b60006020820190506135ed6000830184612890565b92915050565b60006040820190506136086000830185612890565b6136156020830184612890565b9392505050565b60006020820190508181036000830152613636818461290d565b905092915050565b6000602082019050818103600083015261365781612977565b9050919050565b6000602082019050818103600083015261367781612ad5565b9050919050565b6000602082019050818103600083015261369781612d4b565b9050919050565b600060208201905081810360008301526136b781612e1d565b9050919050565b60006101e0820190506136d46000830184612fe0565b92915050565b60006020820190506136ef6000830184613045565b92915050565b60006136ff613710565b905061370b8282613cfd565b919050565b6000604051905090565b600067ffffffffffffffff82111561373557613734613e7d565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561376157613760613e7d565b5b61376a82613eac565b9050602081019050919050565b6000819050919050565b600060049050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006137d682613c07565b91506137e183613c07565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561381c5761381b613e1f565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561385457613853613e1f565b5b828201905092915050565b600061386a82613c31565b915061387583613c31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156138aa576138a9613e1f565b5b828201905092915050565b60006138c082613c07565b91506138cb83613c07565b9250826138db576138da613e4e565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561391457613913613e1f565b5b828205905092915050565b600061392a82613c31565b915061393583613c31565b92508261394557613944613e4e565b5b828204905092915050565b6000808291508390505b600185111561399a5780860481111561397657613975613e1f565b5b60018516156139855780820291505b808102905061399385613eca565b945061395a565b94509492505050565b60006139ae82613c31565b91506139b983613c31565b92506139e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846139ee565b905092915050565b6000826139fe5760019050613aba565b81613a0c5760009050613aba565b8160018114613a225760028114613a2c57613a5b565b6001915050613aba565b60ff841115613a3e57613a3d613e1f565b5b8360020a915084821115613a5557613a54613e1f565b5b50613aba565b5060208310610133831016604e8410600b8410161715613a905782820a905083811115613a8b57613a8a613e1f565b5b613aba565b613a9d8484846001613950565b92509050818404811115613ab457613ab3613e1f565b5b81810290505b9392505050565b6000613acc82613c31565b9150613ad783613c31565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b1057613b0f613e1f565b5b828202905092915050565b6000613b2682613c07565b9150613b3183613c07565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615613b6c57613b6b613e1f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615613ba457613ba3613e1f565b5b828203905092915050565b6000613bba82613c31565b9150613bc583613c31565b925082821015613bd857613bd7613e1f565b5b828203905092915050565b6000613bee82613c11565b9050919050565b6000613c0082613be3565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613c75578082015181840152602081019050613c5a565b83811115613c84576000848401525b50505050565b6000613c9582613c07565b91507f8000000000000000000000000000000000000000000000000000000000000000821415613cc857613cc7613e1f565b5b600182039050919050565b6000613cde82613c31565b91506000821415613cf257613cf1613e1f565b5b600182039050919050565b613d0682613eac565b810181811067ffffffffffffffff82111715613d2557613d24613e7d565b5b80604052505050565b6000613d3982613c07565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d6c57613d6b613e1f565b5b600182019050919050565b6000613d8282613c31565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613db557613db4613e1f565b5b600182019050919050565b6000613dcb82613dd2565b9050919050565b6000613ddd82613ebd565b9050919050565b6000819050919050565b6000613df982613c31565b9150613e0483613c31565b925082613e1457613e13613e4e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f222063793d220000000000000000000000000000000000000000000000000000600082015250565b7f3c7374796c653e2e62617365207b20666f6e743a20626f6c642033307078207360008201527f616e732d73657269663b2066696c6c3a2077686974657d2e6974656d207b206660208201527f6f6e743a206e6f726d616c20323470782073616e732d73657269663b2066696c60408201527f6c3a2077686974657d2e737562207b20666f6e743a206e6f726d616c2031347060608201527f782073616e732d73657269663b2066696c6c3a2077686974657d3c2f7374796c60808201527f653e3c2f646566733e000000000000000000000000000000000000000000000060a082015250565b7f2922202f3e000000000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d223135302220793d22000000000000000000000000000000600082015250565b7f2077696474683d22000000000000000000000000000000000000000000000000600082015250565b7f222f3e203c73746f70206f66667365743d22302e35222073746f702d636f6c6f60008201527f723d220000000000000000000000000000000000000000000000000000000000602082015250565b7f3c7465787420783d223135302220793d223238302220636c6173733d2269746560008201527f6d223e2400000000000000000000000000000000000000000000000000000000602082015250565b7f3c726563742066696c6c3d2275726c28237061696e7400000000000000000000600082015250565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b7f4f7061636974792067726561746572207468616e203078666600000000000000600082015250565b7f3c6c696e6561724772616469656e742069643d227061696e7400000000000000600082015250565b7f3c7465787420783d2232302220793d223238302220636c6173733d226974656d60008201527f223e4f746865723c2f746578743e000000000000000000000000000000000000602082015250565b7f2900000000000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226974656d223e2400000000000000000000000000000000600082015250565b7f3c726563742077696474683d2233303022206865696768743d2233303022206660008201527f696c6c3d2223323732373237222f3e0000000000000000000000000000000000602082015250565b7f222f3e3c2f6c696e6561724772616469656e743e000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b7f22202f3e00000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226974656d223e0000000000000000000000000000000000600082015250565b7f7b226e616d65223a202242616c616e6365205761746368657220230000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f746578743e00000000000000000000000000000000000000000000000000600082015250565b7f2220723d22000000000000000000000000000000000000000000000000000000600082015250565b7f29222063783d2200000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d2232302220793d2235382220636c6173733d22626173652260008201527f3e24000000000000000000000000000000000000000000000000000000000000602082015250565b7f22207472616e73666f726d3d22726f7461746528000000000000000000000000600082015250565b7f56616c75652067726561746572207468616e2030786666666666660000000000600082015250565b7f3c7465787420783d2232302220793d2200000000000000000000000000000000600082015250565b7f2922207472616e73666f726d3d22726f74617465280000000000000000000000600082015250565b7f292220783d220000000000000000000000000000000000000000000000000000600082015250565b7f2c20000000000000000000000000000000000000000000000000000000000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4f6666736574206f7574206f6620626f756e6473000000000000000000000000600082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f2220636c6173733d226261736520737562223e00000000000000000000000000600082015250565b50565b7f3c646566733e0000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f3c7465787420783d2232302220793d2233302220636c6173733d22737562223e60008201527f57616c6c65742023000000000000000000000000000000000000000000000000602082015250565b7f3c636972636c652066696c6c3d2275726c28237061696e740000000000000000600082015250565b7f7267626128000000000000000000000000000000000000000000000000000000600082015250565b7f222c20226465736372697074696f6e223a202254686973204e4654206469737060008201527f6c61797320697473206f776e6572732062616c616e636573206f66207472616360208201527f6b656420746f6b656e732e222c2022696d616765223a2022646174613a696d6160408201527f67652f7376672b786d6c3b6261736536342c0000000000000000000000000000606082015250565b7f223e203c73746f702073746f702d636f6c6f723d220000000000000000000000600082015250565b61480381613be3565b811461480e57600080fd5b50565b61481a81613bf5565b811461482557600080fd5b50565b61483181613c31565b811461483c57600080fd5b50565b61484881613c3b565b811461485357600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302033303020333030223ea264697066735822122056233d51729822fd5f41e594ac2912fdc3c0e398793efd7ac17dad9b985ab77864736f6c63430008040033",
  "libraries": {
    "Base64": "0xEa38F4f6bdea43d7234845Aa61b63FB4069df0Bf",
    "OStrings": "0x95B8f54CbC04B817d79A7278B0C23458e76e226d",
    "CustomSort": "0x66a26A9758c1955cCF8c0EF1bCd628b550cdFFe8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2770,
        "contract": "contracts/PortfolioMetadata.sol:PortfolioMetadata",
        "label": "portfolioTrackerAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2773,
        "contract": "contracts/PortfolioMetadata.sol:PortfolioMetadata",
        "label": "portfolioTracker",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPortfolioNFT)4980"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPortfolioNFT)4980": {
        "encoding": "inplace",
        "label": "contract IPortfolioNFT",
        "numberOfBytes": "20"
      }
    }
  }
}